{"title":"$:/plugins/linonetwo/commandpalette","description":"Command palette Chinese translated","author":"linonetwo","version":"0.1.0","core-version":">=5.0.8","list":"readme","source":"https://github.com/tiddly-gittly/tiddlywiki-plugins","dependents":"$:/plugins/linonetwo/pinyin-fuzzy-search","plugin-type":"plugin","type":"application/json","text":"{\"tiddlers\":{\"$:/config/ShortcutInfo/command-palette-switch-history-back\":{\"title\":\"$:/config/ShortcutInfo/command-palette-switch-history-back\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Switch to previously opened tiddler (Inversed)\"},\"$:/config/ShortcutInfo/command-palette-switch-history\":{\"title\":\"$:/config/ShortcutInfo/command-palette-switch-history\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Switch to previously opened tiddler\"},\"$:/config/ShortcutInfo/insert-command-palette-result\":{\"title\":\"$:/config/ShortcutInfo/insert-command-palette-result\",\"created\":\"20200604175511112\",\"modified\":\"20200604175520378\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Insert the current result in the previously focused element\"},\"$:/config/ShortcutInfo/open-command-palette-command-mode\":{\"title\":\"$:/config/ShortcutInfo/open-command-palette-command-mode\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Open the command palette in command mode\"},\"$:/config/ShortcutInfo/open-command-palette-selection\":{\"title\":\"$:/config/ShortcutInfo/open-command-palette-selection\",\"created\":\"20200604175511112\",\"modified\":\"20200604175520378\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Open the command palette with current selection\"},\"$:/config/ShortcutInfo/open-command-palette\":{\"title\":\"$:/config/ShortcutInfo/open-command-palette\",\"created\":\"20200531223953066\",\"modified\":\"20200531224011568\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Open the command palette\"},\"$:/config/shortcuts-mac/insert-command-palette-result\":{\"title\":\"$:/config/shortcuts-mac/insert-command-palette-result\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"shift-cmd-I\"},\"$:/config/shortcuts-mac/open-command-palette-command-mode\":{\"title\":\"$:/config/shortcuts-mac/open-command-palette-command-mode\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"shift-cmd-P\"},\"$:/config/shortcuts-mac/open-command-palette\":{\"title\":\"$:/config/shortcuts-mac/open-command-palette\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"cmd-P\"},\"$:/config/shortcuts/command-palette-switch-history-back\":{\"title\":\"$:/config/shortcuts/command-palette-switch-history-back\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl-shift-tab\"},\"$:/config/shortcuts/command-palette-switch-history\":{\"title\":\"$:/config/shortcuts/command-palette-switch-history\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl-tab\"},\"$:/config/shortcuts/insert-command-palette-result\":{\"title\":\"$:/config/shortcuts/insert-command-palette-result\",\"created\":\"20200604175539239\",\"modified\":\"20200604175658624\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl+shift+I\"},\"$:/config/shortcuts/open-command-palette-command-mode\":{\"title\":\"$:/config/shortcuts/open-command-palette-command-mode\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl-shift-P\"},\"$:/config/shortcuts/open-command-palette-selection\":{\"title\":\"$:/config/shortcuts/open-command-palette-selection\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\"},\"$:/config/shortcuts/open-command-palette\":{\"title\":\"$:/config/shortcuts/open-command-palette\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"ctrl-P\"},\"$:/plugins/linonetwo/commandpalette/Browser Refresh\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Browser Refresh\",\"command-palette-name\":\"Browser Refresh\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/Refresh/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Refresh/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-browser-refresh\\n\"},\"$:/plugins/linonetwo/commandpalette/Cancel Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Cancel Tiddler\",\"command-palette-mode\":\"drafts\",\"command-palette-name\":\"Cancel Tiddler\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Cancel/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Cancel/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-cancel-tiddler\\n\"},\"$:/plugins/linonetwo/commandpalette/Clone Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Clone Tiddler\",\"command-palette-name\":\"Clone Tiddler\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Clone/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Clone/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-new-tiddler\\n\"},\"$:/plugins/linonetwo/commandpalette/Close All Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Close All Tiddlers\",\"command-palette-name\":\"Close All Tiddlers\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/CloseAll/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/CloseAll/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-close-all-tiddlers\\n\"},\"$:/plugins/linonetwo/commandpalette/Close Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Close Tiddler\",\"command-palette-name\":\"Close Tiddler\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Close/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Close/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-close-tiddler\\n\"},\"$:/plugins/linonetwo/commandpalette/Close other Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Close other Tiddlers\",\"command-palette-name\":\"Close other Tiddlers\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/CloseOthers/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/CloseOthers/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-close-other-tiddlers\\n\"},\"$:/plugins/linonetwo/commandpalette/Command Palette Settings\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Command Palette Settings\",\"command-palette-name\":\"Command Palette Settings\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"命令菜单设置\",\"command-palette-hint\":\"打开命令菜单的设置，快捷设置命令菜单相关配置\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"|\\n\"},\"$:/core/ui/KeyboardShortcuts/CommandPalette\":{\"title\":\"$:/core/ui/KeyboardShortcuts/CommandPalette\",\"key\":\"((open-command-palette))\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"open-command-palette\\\"/>\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteCommandMode\":{\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteCommandMode\",\"key\":\"((open-command-palette-command-mode))\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"open-command-palette\\\" $param=\\\">\\\" />\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteHistory\":{\"text\":\"{\\n    \\\"history\\\": [\\n        \\\"Explorer\\\",\\n        \\\"Clone Tiddler\\\",\\n        \\\"See Drafts\\\",\\n        \\\"Refresh Server\\\",\\n        \\\"Permaview\\\",\\n        \\\"See Themes\\\",\\n        \\\"Refresh Command Palette\\\",\\n        \\\"See Shadows Tiddlers\\\",\\n        \\\"See Orphans Tiddlers\\\",\\n        \\\"Remove tag\\\",\\n        \\\"Add tag to tiddler\\\",\\n        \\\"Delete Tiddler\\\",\\n        \\\"Close Tiddler\\\",\\n        \\\"Recent Tiddlers\\\",\\n        \\\"New Task with Title\\\",\\n        \\\"Edit Tiddler\\\",\\n        \\\"See Mising Tiddlers\\\",\\n        \\\"Show CommandTiddlers\\\",\\n        \\\"See untagged Tiddlers\\\",\\n        \\\"See Languages\\\",\\n        \\\"See Plugins\\\",\\n        \\\"New Command Wizard\\\",\\n        \\\"Cancel Tiddler\\\",\\n        \\\"Save Tiddler\\\",\\n        \\\"Close other Tiddlers\\\",\\n        \\\"Permalink\\\",\\n        \\\"Create Command\\\",\\n        \\\"Unfold All Tiddlers\\\",\\n        \\\"Fold All Tiddlers\\\",\\n        \\\"Print\\\",\\n        \\\"Close All Tiddlers\\\",\\n        \\\"Save Wiki\\\",\\n        \\\"Home\\\",\\n        \\\"Toggle Fullscreen\\\",\\n        \\\"New Tiddler\\\"\\n    ]\\n}\",\"type\":\"application/json\",\"created\":\"20200603153247010\",\"modified\":\"20200610112340290\",\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteHistory\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps\":{\"text\":\"{\\n  \\\"steps\\\": [\\n    { \\\"filter\\\": \\\"[list[$:/StoryList]pinyinfuse[]]\\\", \\\"hint\\\": \\\"历史记录\\\", \\\"caret\\\": \\\"30\\\" },\\n    { \\\"filter\\\": \\\"[!is[system]pinyinfuse:title[]]\\\", \\\"hint\\\": \\\"在标题中\\\", \\\"caret\\\": \\\"29\\\" },\\n    { \\\"filter\\\": \\\"[all[system+shadows]pinyinfuse:title[]]\\\", \\\"hint\\\": \\\"在标题中 (系统)\\\", \\\"caret\\\": \\\"37\\\" },\\n    { \\\"filter\\\": \\\"[all[]pinyinfuse[]]\\\", \\\"hint\\\": \\\"全局搜索\\\", \\\"caret\\\": \\\"17\\\" },\\n    { \\\"filter\\\": \\\"[all[shadows]pinyinfuse[]]\\\", \\\"hint\\\": \\\"shadows\\\", \\\"caret\\\": \\\"24\\\" }\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteSelection\":{\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteSelection\",\"created\":\"20200604175339522\",\"key\":\"((open-command-palette-selection))\",\"modified\":\"20200604175716862\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"open-command-palette-selection\\\"/>\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteSettings\":{\"text\":\"{\\n    \\\"maxResults\\\": \\\"30\\\",\\n    \\\"maxResultHintSize\\\": 45,\\n    \\\"neverBasic\\\": \\\"false\\\",\\n    \\\"smoothScroll\\\": \\\"false\\\"\\n}\",\"type\":\"application/json\",\"created\":\"20200604160432063\",\"modified\":\"20200610112626066\",\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteSettings\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistory\":{\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistory\",\"key\":\"((command-palette-switch-history))\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"command-palette-switch-history\\\" />\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistoryBack\":{\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistoryBack\",\"key\":\"((command-palette-switch-history-back))\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"command-palette-switch-history-back\\\" />\"},\"$:/plugins/linonetwo/commandpalette/CommandPaletteWidget.js\":{\"title\":\"$:/plugins/linonetwo/commandpalette/CommandPaletteWidget.js\",\"text\":\"'use strict';\\n/**\\n * Checks if `value` is the\\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\\n * @example\\n *\\n * _.isObject({});\\n * // => true\\n *\\n * _.isObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isObject(_.noop);\\n * // => true\\n *\\n * _.isObject(null);\\n * // => false\\n */\\n\\nfunction isObject(value) {\\n  var type = typeof value;\\n  return value != null && (type == 'object' || type == 'function');\\n}\\n\\nvar isObject_1 = isObject;\\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\\n/** Detect free variable `global` from Node.js. */\\n\\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\\nvar _freeGlobal = freeGlobal;\\n/** Detect free variable `self`. */\\n\\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\\n/** Used as a reference to the global object. */\\n\\nvar root = _freeGlobal || freeSelf || Function('return this')();\\nvar _root = root;\\n/**\\n * Gets the timestamp of the number of milliseconds that have elapsed since\\n * the Unix epoch (1 January 1970 00:00:00 UTC).\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @category Date\\n * @returns {number} Returns the timestamp.\\n * @example\\n *\\n * _.defer(function(stamp) {\\n *   console.log(_.now() - stamp);\\n * }, _.now());\\n * // => Logs the number of milliseconds it took for the deferred invocation.\\n */\\n\\nvar now = function () {\\n  return _root.Date.now();\\n};\\n\\nvar now_1 = now;\\n/** Used to match a single whitespace character. */\\n\\nvar reWhitespace = /\\\\s/;\\n/**\\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\\n * character of `string`.\\n *\\n * @private\\n * @param {string} string The string to inspect.\\n * @returns {number} Returns the index of the last non-whitespace character.\\n */\\n\\nfunction trimmedEndIndex(string) {\\n  var index = string.length;\\n\\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\\n\\n  return index;\\n}\\n\\nvar _trimmedEndIndex = trimmedEndIndex;\\n/** Used to match leading whitespace. */\\n\\nvar reTrimStart = /^\\\\s+/;\\n/**\\n * The base implementation of `_.trim`.\\n *\\n * @private\\n * @param {string} string The string to trim.\\n * @returns {string} Returns the trimmed string.\\n */\\n\\nfunction baseTrim(string) {\\n  return string ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;\\n}\\n\\nvar _baseTrim = baseTrim;\\n/** Built-in value references. */\\n\\nvar Symbol = _root.Symbol;\\nvar _Symbol = Symbol;\\n/** Used for built-in method references. */\\n\\nvar objectProto$1 = Object.prototype;\\n/** Used to check objects for own properties. */\\n\\nvar hasOwnProperty = objectProto$1.hasOwnProperty;\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\n\\nvar nativeObjectToString$1 = objectProto$1.toString;\\n/** Built-in value references. */\\n\\nvar symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;\\n/**\\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the raw `toStringTag`.\\n */\\n\\nfunction getRawTag(value) {\\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\\n      tag = value[symToStringTag$1];\\n\\n  try {\\n    value[symToStringTag$1] = undefined;\\n    var unmasked = true;\\n  } catch (e) {}\\n\\n  var result = nativeObjectToString$1.call(value);\\n\\n  if (unmasked) {\\n    if (isOwn) {\\n      value[symToStringTag$1] = tag;\\n    } else {\\n      delete value[symToStringTag$1];\\n    }\\n  }\\n\\n  return result;\\n}\\n\\nvar _getRawTag = getRawTag;\\n/** Used for built-in method references. */\\n\\nvar objectProto = Object.prototype;\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\n\\nvar nativeObjectToString = objectProto.toString;\\n/**\\n * Converts `value` to a string using `Object.prototype.toString`.\\n *\\n * @private\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n */\\n\\nfunction objectToString(value) {\\n  return nativeObjectToString.call(value);\\n}\\n\\nvar _objectToString = objectToString;\\n/** `Object#toString` result references. */\\n\\nvar nullTag = '[object Null]',\\n    undefinedTag = '[object Undefined]';\\n/** Built-in value references. */\\n\\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n/**\\n * The base implementation of `getTag` without fallbacks for buggy environments.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\n\\nfunction baseGetTag(value) {\\n  if (value == null) {\\n    return value === undefined ? undefinedTag : nullTag;\\n  }\\n\\n  return symToStringTag && symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);\\n}\\n\\nvar _baseGetTag = baseGetTag;\\n/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\n\\nfunction isObjectLike(value) {\\n  return value != null && typeof value == 'object';\\n}\\n\\nvar isObjectLike_1 = isObjectLike;\\n/** `Object#toString` result references. */\\n\\nvar symbolTag = '[object Symbol]';\\n/**\\n * Checks if `value` is classified as a `Symbol` primitive or object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\\n * @example\\n *\\n * _.isSymbol(Symbol.iterator);\\n * // => true\\n *\\n * _.isSymbol('abc');\\n * // => false\\n */\\n\\nfunction isSymbol(value) {\\n  return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;\\n}\\n\\nvar isSymbol_1 = isSymbol;\\n/** Used as references for various `Number` constants. */\\n\\nvar NAN = 0 / 0;\\n/** Used to detect bad signed hexadecimal string values. */\\n\\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\\n/** Used to detect binary string values. */\\n\\nvar reIsBinary = /^0b[01]+$/i;\\n/** Used to detect octal string values. */\\n\\nvar reIsOctal = /^0o[0-7]+$/i;\\n/** Built-in method references without a dependency on `root`. */\\n\\nvar freeParseInt = parseInt;\\n/**\\n * Converts `value` to a number.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to process.\\n * @returns {number} Returns the number.\\n * @example\\n *\\n * _.toNumber(3.2);\\n * // => 3.2\\n *\\n * _.toNumber(Number.MIN_VALUE);\\n * // => 5e-324\\n *\\n * _.toNumber(Infinity);\\n * // => Infinity\\n *\\n * _.toNumber('3.2');\\n * // => 3.2\\n */\\n\\nfunction toNumber(value) {\\n  if (typeof value == 'number') {\\n    return value;\\n  }\\n\\n  if (isSymbol_1(value)) {\\n    return NAN;\\n  }\\n\\n  if (isObject_1(value)) {\\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\\n    value = isObject_1(other) ? other + '' : other;\\n  }\\n\\n  if (typeof value != 'string') {\\n    return value === 0 ? value : +value;\\n  }\\n\\n  value = _baseTrim(value);\\n  var isBinary = reIsBinary.test(value);\\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\\n}\\n\\nvar toNumber_1 = toNumber;\\n/** Error message constants. */\\n\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\n\\nvar nativeMax = Math.max,\\n    nativeMin = Math.min;\\n/**\\n * Creates a debounced function that delays invoking `func` until after `wait`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked. The debounced function comes with a `cancel` method to cancel\\n * delayed `func` invocations and a `flush` method to immediately invoke them.\\n * Provide `options` to indicate whether `func` should be invoked on the\\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\\n * with the last arguments provided to the debounced function. Subsequent\\n * calls to the debounced function return the result of the last `func`\\n * invocation.\\n *\\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the `wait` timeout.\\n *\\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between `_.debounce` and `_.throttle`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait=0] The number of milliseconds to delay.\\n * @param {Object} [options={}] The options object.\\n * @param {boolean} [options.leading=false]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time `func` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\\n *\\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }));\\n *\\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\\n * var source = new EventSource('/stream');\\n * jQuery(source).on('message', debounced);\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel);\\n */\\n\\nfunction debounce(func, wait, options) {\\n  var lastArgs,\\n      lastThis,\\n      maxWait,\\n      result,\\n      timerId,\\n      lastCallTime,\\n      lastInvokeTime = 0,\\n      leading = false,\\n      maxing = false,\\n      trailing = true;\\n\\n  if (typeof func != 'function') {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n\\n  wait = toNumber_1(wait) || 0;\\n\\n  if (isObject_1(options)) {\\n    leading = !!options.leading;\\n    maxing = 'maxWait' in options;\\n    maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;\\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\\n  }\\n\\n  function invokeFunc(time) {\\n    var args = lastArgs,\\n        thisArg = lastThis;\\n    lastArgs = lastThis = undefined;\\n    lastInvokeTime = time;\\n    result = func.apply(thisArg, args);\\n    return result;\\n  }\\n\\n  function leadingEdge(time) {\\n    // Reset any `maxWait` timer.\\n    lastInvokeTime = time; // Start the timer for the trailing edge.\\n\\n    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\\n\\n    return leading ? invokeFunc(time) : result;\\n  }\\n\\n  function remainingWait(time) {\\n    var timeSinceLastCall = time - lastCallTime,\\n        timeSinceLastInvoke = time - lastInvokeTime,\\n        timeWaiting = wait - timeSinceLastCall;\\n    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\\n  }\\n\\n  function shouldInvoke(time) {\\n    var timeSinceLastCall = time - lastCallTime,\\n        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\\n    // trailing edge, the system time has gone backwards and we're treating\\n    // it as the trailing edge, or we've hit the `maxWait` limit.\\n\\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\\n  }\\n\\n  function timerExpired() {\\n    var time = now_1();\\n\\n    if (shouldInvoke(time)) {\\n      return trailingEdge(time);\\n    } // Restart the timer.\\n\\n\\n    timerId = setTimeout(timerExpired, remainingWait(time));\\n  }\\n\\n  function trailingEdge(time) {\\n    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\\n    // debounced at least once.\\n\\n    if (trailing && lastArgs) {\\n      return invokeFunc(time);\\n    }\\n\\n    lastArgs = lastThis = undefined;\\n    return result;\\n  }\\n\\n  function cancel() {\\n    if (timerId !== undefined) {\\n      clearTimeout(timerId);\\n    }\\n\\n    lastInvokeTime = 0;\\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\\n  }\\n\\n  function flush() {\\n    return timerId === undefined ? result : trailingEdge(now_1());\\n  }\\n\\n  function debounced() {\\n    var time = now_1(),\\n        isInvoking = shouldInvoke(time);\\n    lastArgs = arguments;\\n    lastThis = this;\\n    lastCallTime = time;\\n\\n    if (isInvoking) {\\n      if (timerId === undefined) {\\n        return leadingEdge(lastCallTime);\\n      }\\n\\n      if (maxing) {\\n        // Handle invocations in a tight loop.\\n        clearTimeout(timerId);\\n        timerId = setTimeout(timerExpired, wait);\\n        return invokeFunc(lastCallTime);\\n      }\\n    }\\n\\n    if (timerId === undefined) {\\n      timerId = setTimeout(timerExpired, wait);\\n    }\\n\\n    return result;\\n  }\\n\\n  debounced.cancel = cancel;\\n  debounced.flush = flush;\\n  return debounced;\\n}\\n\\nvar debounce_1 = debounce;\\n\\nconst Widget = require('$:/core/modules/widgets/widget.js').widget;\\n\\nclass CommandPaletteWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n    this.actions = [];\\n    this.triggers = [];\\n    this.currentResults = [];\\n    this.typeField = 'command-palette-type';\\n    /** 用于搜索的字段 */\\n\\n    this.nameField = 'command-palette-name';\\n    /** 用于展示翻译内容的字段 */\\n\\n    this.captionField = 'command-palette-caption';\\n    this.hintField = 'command-palette-hint';\\n    this.modeField = 'command-palette-mode';\\n    this.userInputField = 'command-palette-user-input';\\n    this.caretField = 'command-palette-caret';\\n    this.immediateField = 'command-palette-immediate';\\n    this.triggerField = 'command-palette-trigger';\\n    this.currentSelection = 0; //0 is nothing selected, 1 is first result,...\\n\\n    this.symbolProviders = {};\\n    this.blockProviderChange = false;\\n    this.defaultSettings = {\\n      maxResults: 15,\\n      maxResultHintSize: 45,\\n      neverBasic: false,\\n      showHistoryOnOpen: true,\\n      escapeGoesBack: true,\\n      alwaysPassSelection: true,\\n      theme: '$:/plugins/linonetwo/commandpalette/Compact.css'\\n    };\\n    this.settings = {};\\n    this.commandHistoryPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteHistory';\\n    this.settingsPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteSettings';\\n    this.searchStepsPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps';\\n    this.customCommandsTag = '$:/tags/CommandPaletteCommand';\\n    this.themesTag = '$:/tags/CommandPaletteTheme';\\n    /** current item's click/enter handler function */\\n\\n    this.currentResolver = () => {};\\n\\n    this.currentProvider = () => {};\\n\\n    this.initialise(parseTreeNode, options);\\n    this.onInput = debounce_1(this.onInput, 300);\\n  }\\n\\n  actionStringBuilder(text) {\\n    return e => this.invokeActionString(text, this, e);\\n  }\\n\\n  actionStringInput(action, hint, e) {\\n    this.blockProviderChange = true;\\n    this.allowInputFieldSelection = true;\\n    this.hint.innerText = hint;\\n    this.input.value = '';\\n\\n    this.currentProvider = () => {};\\n\\n    this.currentResolver = e => {\\n      this.invokeActionString(action, this, e, {\\n        commandpaletteinput: this.input.value\\n      });\\n      this.closePalette();\\n    };\\n\\n    this.showResults([]);\\n    this.onInput(this.input.value);\\n  }\\n\\n  invokeFieldMangler(tiddler, message, param, e) {\\n    let action = `<$fieldmangler tiddler=\\\"${tiddler}\\\">\\n\\t\\t\\t<$action-sendmessage $message=\\\"${message}\\\" $param=\\\"${param}\\\"/>\\n\\t\\t\\t</$fieldmangler>`;\\n    this.invokeActionString(action, this, e);\\n  }\\n\\n  tagOperation(event, hintTiddler, hintTag,\\n  /** (tiddler, terms) => [tiddlers] */\\n  filter, allowNoSelection, message) {\\n    this.blockProviderChange = true;\\n    if (allowNoSelection) this.allowInputFieldSelection = true;\\n    this.currentProvider = this.historyProviderBuilder(hintTiddler);\\n\\n    this.currentResolver = e => {\\n      if (this.currentSelection === 0) return;\\n      let tiddler = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\\n\\n      this.currentProvider = terms => {\\n        this.currentSelection = 0;\\n        this.hint.innerText = hintTag;\\n\\n        if (tiddler) {\\n          let searches = filter(tiddler, terms);\\n          this.showResults(searches.map(s => {\\n            return {\\n              name: s\\n            };\\n          }));\\n        }\\n      };\\n\\n      this.input.value = '';\\n      this.onInput(this.input.value);\\n\\n      this.currentResolver = e => {\\n        if (!allowNoSelection && this.currentSelection === 0) return;\\n        let tag = this.input.value;\\n\\n        if (this.currentSelection !== 0) {\\n          tag = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\\n        }\\n\\n        this.invokeFieldMangler(tiddler, message, tag, e);\\n\\n        if (!e.getModifierState('Shift')) {\\n          this.closePalette();\\n        } else {\\n          this.onInput(this.input.value);\\n        }\\n      };\\n    };\\n\\n    this.input.value = '';\\n    this.onInput(this.input.value);\\n  }\\n\\n  refreshThemes(e) {\\n    this.themes = this.getTiddlersWithTag(this.themesTag);\\n    let found = false;\\n\\n    for (let theme of this.themes) {\\n      let themeName = theme.fields.title;\\n\\n      if (themeName === this.settings.theme) {\\n        found = true;\\n        this.addTagIfNecessary(themeName, '$:/tags/Stylesheet', e);\\n      } else {\\n        this.invokeFieldMangler(themeName, 'tm-remove-tag', '$:/tags/Stylesheet', e);\\n      }\\n    }\\n\\n    if (found) return;\\n    this.addTagIfNecessary(this.defaultSettings.theme, '$:/tags/Stylesheet', e);\\n  } //Re-adding an existing tag changes modification date\\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tiddler' implicitly has an 'any' type.\\n\\n\\n  addTagIfNecessary(tiddler, tag, e) {\\n    if (this.hasTag(tiddler, tag)) return;\\n    this.invokeFieldMangler(tiddler, 'tm-add-tag', tag, e);\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tiddler' implicitly has an 'any' type.\\n\\n\\n  hasTag(tiddler, tag) {\\n    // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n    return $tw.wiki.getTiddler(tiddler).fields.tags.includes(tag);\\n  }\\n\\n  refreshCommands() {\\n    var _a, _b, _c, _d, _e;\\n\\n    this.actions = [];\\n    this.actions.push({\\n      name: 'Refresh Command Palette',\\n      action: e => {\\n        this.refreshCommandPalette();\\n        this.promptCommand('');\\n      },\\n      keepPalette: true\\n    });\\n    this.actions.push({\\n      name: 'Explorer',\\n      action: e => this.explorer(e),\\n      keepPalette: true\\n    });\\n    this.actions.push({\\n      name: 'See History',\\n      action: e => this.showHistory(),\\n      keepPalette: true\\n    });\\n    this.actions.push({\\n      name: 'New Command Wizard',\\n      action: e => this.newCommandWizard(),\\n      keepPalette: true\\n    });\\n    this.actions.push({\\n      name: 'Add tag to tiddler',\\n      action: e => this.tagOperation(e, 'Pick tiddler to tag', 'Pick tag to add (⇧⏎ to add multiple)', (tiddler, terms) => // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n      $tw.wiki.filterTiddlers(`[!is[system]tags[]] [is[system]tags[]] -[[${tiddler}]tags[]] +[pinyinfuse[${terms}]]`), true, 'tm-add-tag'),\\n      keepPalette: true\\n    });\\n    this.actions.push({\\n      name: 'Remove tag',\\n      action: e => this.tagOperation(e, 'Pick tiddler to untag', 'Pick tag to remove (⇧⏎ to remove multiple)', // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n      (tiddler, terms) => $tw.wiki.filterTiddlers(`[[${tiddler}]tags[]] +[pinyinfuse[${terms}]]`), false, 'tm-remove-tag'),\\n      keepPalette: true\\n    });\\n    let commandTiddlers = this.getTiddlersWithTag(this.customCommandsTag);\\n\\n    for (let tiddler of commandTiddlers) {\\n      if (!tiddler.fields[this.typeField] === undefined) continue;\\n      let name = tiddler.fields[this.nameField];\\n      if (typeof name !== 'string') throw new Error(`Command palette tiddler ${tiddler.fields.title} doesn't have a ${this.nameField} field`);\\n      let caption = this.translateCaption(tiddler.fields[this.captionField]);\\n      let type = tiddler.fields[this.typeField];\\n      let text = this.translateCaption(tiddler.fields.text);\\n      if (text === undefined) text = '';\\n      let textFirstLine = ((_a = text.match(/^.*/)) !== null && _a !== void 0 ? _a : [''])[0];\\n      let hint = this.translateCaption((_c = (_b = tiddler.fields[this.hintField]) !== null && _b !== void 0 ? _b : tiddler.fields[this.nameField]) !== null && _c !== void 0 ? _c : '');\\n\\n      if (type === 'shortcut') {\\n        let trigger = tiddler.fields[this.triggerField];\\n        if (trigger === undefined) continue;\\n        this.triggers.push({\\n          name,\\n          caption,\\n          trigger,\\n          text,\\n          hint\\n        });\\n        continue;\\n      }\\n\\n      if (!tiddler.fields[this.nameField] === undefined) continue;\\n\\n      if (type === 'prompt') {\\n        let immediate = !!tiddler.fields[this.immediateField];\\n        let caret = (_d = Number(tiddler.fields[this.caretField])) !== null && _d !== void 0 ? _d : 0;\\n        let action = {\\n          name,\\n          caption,\\n          hint,\\n          action: () => this.promptCommand(textFirstLine, caret),\\n          keepPalette: !immediate,\\n          immediate: immediate\\n        };\\n        this.actions.push(action);\\n        continue;\\n      }\\n\\n      if (type === 'prompt-basic') {\\n        let caret = (_e = Number(tiddler.fields[this.caretField])) !== null && _e !== void 0 ? _e : 0;\\n        let action = {\\n          name,\\n          caption,\\n          hint,\\n          action: () => this.promptCommandBasic(textFirstLine, caret, hint),\\n          keepPalette: true\\n        };\\n        this.actions.push(action);\\n        continue;\\n      }\\n\\n      if (type === 'message') {\\n        this.actions.push({\\n          name,\\n          caption,\\n          hint,\\n          action: e => this.tmMessageBuilder(textFirstLine)(e),\\n          keepPalette: false\\n        });\\n        continue;\\n      }\\n\\n      if (type === 'actionString') {\\n        let userInput = tiddler.fields[this.userInputField] !== undefined && tiddler.fields[this.userInputField] === 'true';\\n\\n        if (userInput) {\\n          this.actions.push({\\n            name,\\n            caption,\\n            hint,\\n            action: e => this.actionStringInput(text, hint, e),\\n            keepPalette: true\\n          });\\n        } else {\\n          this.actions.push({\\n            name,\\n            caption,\\n            hint,\\n            action: e => this.actionStringBuilder(text)(e),\\n            keepPalette: false\\n          });\\n        }\\n\\n        continue;\\n      }\\n\\n      if (type === 'history') {\\n        let mode = tiddler.fields[this.modeField];\\n        this.actions.push({\\n          name,\\n          caption,\\n          hint,\\n          action: e => this.commandWithHistoryPicker(textFirstLine, hint, mode).handler(e),\\n          keepPalette: true\\n        });\\n        continue;\\n      }\\n    }\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'caption' implicitly has an 'any' type.\\n\\n\\n  translateCaption(caption) {\\n    // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n    return $tw.wiki.renderText('text/plain', 'text/vnd.tiddlywiki', caption);\\n  }\\n\\n  newCommandWizard() {\\n    this.blockProviderChange = true;\\n    this.input.value = '';\\n    this.hint.innerText = 'Command Name';\\n    let name = '';\\n    let type = '';\\n    let hint = '';\\n\\n    let messageStep = () => {\\n      this.input.value = '';\\n      this.hint.innerText = 'Enter Message';\\n\\n      this.currentResolver = e => {\\n        this.tmMessageBuilder('tm-new-tiddler', {\\n          title: '$:/' + name,\\n          tags: this.customCommandsTag,\\n          [this.typeField]: type,\\n          [this.nameField]: name,\\n          [this.hintField]: hint,\\n          text: this.input.value\\n        })(e);\\n        this.closePalette();\\n      };\\n    };\\n\\n    let hintStep = () => {\\n      this.input.value = '';\\n      this.hint.innerText = 'Enter hint';\\n\\n      this.currentResolver = e => {\\n        hint = this.input.value;\\n        messageStep();\\n      };\\n    };\\n\\n    let typeStep = () => {\\n      this.input.value = '';\\n      this.hint.innerText = 'Enter type (prompt, prompt-basic, message, actionString, history)';\\n\\n      this.currentResolver = e => {\\n        type = this.input.value;\\n\\n        if (type === 'history') {\\n          hintStep();\\n        } else {\\n          this.tmMessageBuilder('tm-new-tiddler', {\\n            title: '$:/' + name,\\n            tags: this.customCommandsTag,\\n            [this.typeField]: type,\\n            [this.nameField]: name\\n          })(e);\\n          this.closePalette();\\n        }\\n      };\\n    };\\n\\n    this.currentProvider = terms => {};\\n\\n    this.currentResolver = e => {\\n      if (this.input.value.length === 0) return;\\n      name = this.input.value;\\n      typeStep();\\n    };\\n\\n    this.showResults([]);\\n  }\\n\\n  explorer(e) {\\n    this.blockProviderChange = true;\\n    this.input.value = '$:/';\\n    this.lastExplorerInput = '$:/';\\n    this.hint.innerText = 'Explorer (⇧⏎ to add multiple)';\\n\\n    this.currentProvider = terms => this.explorerProvider('$:/', terms);\\n\\n    this.currentResolver = e => {\\n      var _a;\\n\\n      if (this.currentSelection === 0) return;\\n      (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\\n    };\\n\\n    this.onInput();\\n  }\\n\\n  explorerProvider(url, terms) {\\n    let switchFolder = url => {\\n      this.input.value = url;\\n      this.lastExplorerInput = this.input.value;\\n\\n      this.currentProvider = terms => this.explorerProvider(url, terms);\\n\\n      this.onInput();\\n    };\\n\\n    if (!this.input.value.startsWith(url)) {\\n      this.input.value = this.lastExplorerInput;\\n    }\\n\\n    this.lastExplorerInput = this.input.value;\\n    this.currentSelection = 0;\\n    let search = this.input.value.substr(url.length); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    let tiddlers = $tw.wiki.filterTiddlers(`[removeprefix[${url}]splitbefore[/]sort[]pinyinfuse[${search}]]`);\\n    let folders = [];\\n    let files = [];\\n\\n    for (let tiddler of tiddlers) {\\n      if (tiddler.endsWith('/')) {\\n        folders.push({\\n          name: tiddler,\\n          action: e => switchFolder(`${url}${tiddler}`)\\n        });\\n      } else {\\n        files.push({\\n          name: tiddler,\\n          action: e => {\\n            this.navigateTo(`${url}${tiddler}`);\\n\\n            if (!e.getModifierState('Shift')) {\\n              this.closePalette();\\n            }\\n          }\\n        });\\n      }\\n    }\\n\\n    let topResult;\\n\\n    if (url !== '$:/') {\\n      let splits = url.split('/');\\n      splits.splice(splits.length - 2);\\n      let parent = splits.join('/') + '/';\\n      topResult = {\\n        name: '..',\\n        action: e => switchFolder(parent)\\n      };\\n      this.showResults([topResult, ...folders, ...files]);\\n      return;\\n    }\\n\\n    this.showResults([...folders, ...files]);\\n  }\\n\\n  setSetting(name, value) {\\n    //doing the validation here too (it's also done in refreshSettings, so you can load you own settings with a json file)\\n    if (typeof value === 'string') {\\n      if (value === 'true') value = true;\\n      if (value === 'false') value = false;\\n    }\\n\\n    this.settings[name] = value; // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.wiki.setTiddlerData(this.settingsPath, this.settings);\\n  } //loadSettings?\\n\\n\\n  refreshSettings() {\\n    //get user or default settings\\n    // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n    this.settings = $tw.wiki.getTiddlerData(this.settingsPath, Object.assign({}, this.defaultSettings)); //Adding eventual missing properties to current user settings\\n\\n    for (let prop in this.defaultSettings) {\\n      if (!this.defaultSettings.hasOwnProperty(prop)) continue;\\n      const ownProp = prop;\\n\\n      if (this.settings[ownProp] === undefined) {\\n        this.settings[ownProp] = this.defaultSettings[ownProp];\\n      }\\n    } // cast all booleans from string from tw\\n\\n\\n    for (let prop in this.settings) {\\n      if (!this.settings.hasOwnProperty(prop)) continue;\\n      const ownProp = prop;\\n      if (typeof this.settings[ownProp] !== 'string') continue;\\n      if (this.settings[ownProp].toLowerCase() === 'true') this.settings[ownProp] = true;\\n      if (this.settings[ownProp].toLowerCase() === 'false') this.settings[ownProp] = false;\\n    }\\n  } //helper function to retrieve all tiddlers (+ their fields) with a tag\\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tag' implicitly has an 'any' type.\\n\\n\\n  getTiddlersWithTag(tag) {\\n    // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n    let tiddlers = $tw.wiki.getTiddlersWithTag(tag); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 't' implicitly has an 'any' type.\\n\\n    return tiddlers.map(t => $tw.wiki.getTiddler(t));\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.\\n\\n\\n  render(parent, nextSibling) {\\n    this.parentDomNode = parent;\\n    this.execute();\\n\\n    if ($tw.utils.pinyinfuse === undefined) {\\n      throw new Error('需要安装 linonetwo/pinyin-fuzzy-search 插件以获得模糊搜索和拼音搜索的能力');\\n    } // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n\\n    this.history = $tw.wiki.getTiddlerData(this.commandHistoryPath, {\\n      history: []\\n    }).history; // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.rootWidget.addEventListener('open-command-palette', e => this.openPalette(e, e.param)); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.rootWidget.addEventListener('open-command-palette-selection', e => this.openPaletteSelection(e)); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.rootWidget.addEventListener('insert-command-palette-result', e => this.insertSelectedResult(e)); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.rootWidget.addEventListener('command-palette-switch-history', e => this.handleSwitchHistory(e, true)); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.rootWidget.addEventListener('command-palette-switch-history-back', e => this.handleSwitchHistory(e, false));\\n    let inputAndMainHintWrapper = this.createElement('div', {\\n      className: 'inputhintwrapper'\\n    });\\n    this.div = this.createElement('div', {\\n      className: 'commandpalette'\\n    }, {\\n      display: 'none'\\n    });\\n    this.mask = this.createElement('div', {\\n      className: 'commandpalette-masklayer'\\n    }, {\\n      opacity: '0'\\n    });\\n    this.input = this.createElement('input', {\\n      type: 'text'\\n    });\\n    this.hint = this.createElement('div', {\\n      className: 'commandpalettehint commandpalettehintmain'\\n    });\\n    inputAndMainHintWrapper.append(this.input, this.hint);\\n    this.scrollDiv = this.createElement('div', {\\n      className: 'cp-scroll'\\n    });\\n    this.div.append(inputAndMainHintWrapper, this.scrollDiv);\\n    this.input.addEventListener('keydown', e => this.onKeyDown(e));\\n    this.input.addEventListener('input', () => this.onInput(this.input.value));\\n    document.addEventListener('click', e => this.onClick(e));\\n    parent.insertBefore(this.mask, nextSibling);\\n    parent.insertBefore(this.div, nextSibling);\\n    this.refreshCommandPalette();\\n    this.symbolProviders['>'] = {\\n      searcher: terms => this.actionProvider(terms),\\n      resolver: e => this.actionResolver(e)\\n    };\\n    this.symbolProviders['》'] = this.symbolProviders['>'];\\n    this.symbolProviders['#'] = {\\n      searcher: terms => this.tagListProvider(terms),\\n      resolver: e => this.tagListResolver(e)\\n    };\\n    this.symbolProviders['@'] = {\\n      searcher: terms => this.tagProvider(terms),\\n      resolver: e => this.defaultResolver(e)\\n    };\\n    this.symbolProviders['?'] = {\\n      searcher: terms => this.helpProvider(terms),\\n      resolver: e => this.helpResolver(e)\\n    };\\n    this.symbolProviders['？'] = this.symbolProviders['?'];\\n    this.symbolProviders['['] = {\\n      searcher: (terms, hint) => this.filterProvider(terms, hint),\\n      resolver: e => this.filterResolver(e)\\n    };\\n    this.symbolProviders['+'] = {\\n      searcher: terms => this.createTiddlerProvider(terms),\\n      resolver: e => this.createTiddlerResolver(e)\\n    };\\n    this.symbolProviders['|'] = {\\n      searcher: terms => this.settingsProvider(terms),\\n      resolver: e => this.settingsResolver(e)\\n    };\\n    this.currentResults = [];\\n\\n    this.currentProvider = () => {};\\n  }\\n\\n  refreshSearchSteps() {\\n    this.searchSteps = []; // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    let steps = $tw.wiki.getTiddlerData(this.searchStepsPath);\\n    steps = steps.steps;\\n\\n    for (let step of steps) {\\n      this.searchSteps.push(this.searchStepBuilder(step.filter, step.caret, step.hint));\\n    }\\n  }\\n\\n  refreshCommandPalette() {\\n    this.refreshSettings(); // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\\n\\n    this.refreshThemes();\\n    this.refreshCommands();\\n    this.refreshSearchSteps();\\n  }\\n\\n  handleSwitchHistory(event, forward) {\\n    // we have history list in palette by default, if we have showHistoryOnOpen === true\\n    // TODO: handle this if !showHistoryOnOpen\\n    if (!this.isOpened) {\\n      this.openPalette(event);\\n    }\\n\\n    this.onKeyDown(new KeyboardEvent('keydown', {\\n      bubbles: false,\\n      cancelable: true,\\n      key: forward ? 'ArrowDown' : 'ArrowUp',\\n      shiftKey: false\\n    }));\\n\\n    const onCtrlKeyUp = keyUpEvent => {\\n      if (!keyUpEvent.ctrlKey) {\\n        this.currentResolver(keyUpEvent);\\n        window.removeEventListener('keyup', onCtrlKeyUp);\\n      }\\n    };\\n\\n    window.addEventListener('keyup', onCtrlKeyUp);\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'command' implicitly has an 'any' type.\\n\\n\\n  updateCommandHistory(command) {\\n    this.history = Array.from(new Set([command.name, ...this.history])); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    $tw.wiki.setTiddlerData(this.commandHistoryPath, {\\n      history: this.history\\n    });\\n  }\\n\\n  historyProviderBuilder(hint, mode) {\\n    return terms => {\\n      this.currentSelection = 0;\\n      this.hint.innerText = hint;\\n      let results;\\n\\n      if (mode !== undefined && mode === 'drafts') {\\n        // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n        results = $tw.wiki.filterTiddlers('[has:field[draft.of]]');\\n      } else if (mode !== undefined && mode === 'story') {\\n        // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n        results = $tw.wiki.filterTiddlers('[list[$:/StoryList]]');\\n      } else {\\n        results = this.getHistory();\\n      } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'r' implicitly has an 'any' type.\\n\\n\\n      results = results.map(r => {\\n        return {\\n          name: r\\n        };\\n      });\\n      this.showResults(results);\\n    };\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'message' implicitly has an 'any' type.\\n\\n\\n  commandWithHistoryPicker(message, hint, mode) {\\n    let handler = e => {\\n      this.blockProviderChange = true;\\n      this.allowInputFieldSelection = true;\\n      this.currentProvider = provider;\\n      this.currentResolver = resolver;\\n      this.input.value = '';\\n      this.onInput(this.input.value);\\n    };\\n\\n    let provider = this.historyProviderBuilder(hint, mode);\\n\\n    let resolver = e => {\\n      if (this.currentSelection === 0) return;\\n      let title = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\\n      this.parentWidget.dispatchEvent({\\n        type: message,\\n        param: title,\\n        tiddlerTitle: title\\n      });\\n      this.closePalette();\\n    };\\n\\n    return {\\n      handler,\\n      provider,\\n      resolver\\n    };\\n  }\\n\\n  onInput(text = '') {\\n    if (this.blockProviderChange) {\\n      //prevent provider changes\\n      this.currentProvider(text);\\n      this.setSelectionToFirst();\\n      return;\\n    }\\n\\n    let {\\n      resolver,\\n      provider,\\n      terms\\n    } = this.parseCommand(text);\\n    this.currentResolver = resolver;\\n    this.currentProvider = provider;\\n    this.currentProvider(terms);\\n    this.setSelectionToFirst();\\n  }\\n\\n  parseCommand(text) {\\n    let terms = '';\\n    let prefix = text.substr(0, 1);\\n    let resolver;\\n    let provider;\\n    let shortcut = this.triggers.find(t => text.startsWith(t.trigger));\\n\\n    if (shortcut !== undefined) {\\n      resolver = e => {\\n        let inputWithoutShortcut = this.input.value.substr(shortcut.trigger.length);\\n        this.invokeActionString(shortcut.text, this, e, {\\n          commandpaletteinput: inputWithoutShortcut\\n        });\\n        this.closePalette();\\n      };\\n\\n      provider = terms => {\\n        this.hint.innerText = shortcut.hint;\\n        this.showResults([]);\\n      };\\n    } else {\\n      let providerSymbol = Object.keys(this.symbolProviders).find(p => p === prefix);\\n\\n      if (providerSymbol === undefined) {\\n        resolver = this.defaultResolver;\\n        provider = this.defaultProvider;\\n        terms = text;\\n      } else {\\n        provider = this.symbolProviders[providerSymbol].searcher;\\n        resolver = this.symbolProviders[providerSymbol].resolver;\\n        terms = text.substring(1);\\n      }\\n    }\\n\\n    return {\\n      resolver,\\n      provider,\\n      terms\\n    };\\n  }\\n\\n  onClick(event) {\\n    if (this.isOpened && !this.div.contains(event.target)) {\\n      this.closePalette();\\n    }\\n  }\\n\\n  openPaletteSelection(event) {\\n    let selection = this.getCurrentSelection();\\n    this.openPalette(event, selection);\\n  }\\n\\n  openPalette(e, selection) {\\n    this.isOpened = true;\\n    this.allowInputFieldSelection = false;\\n    this.goBack = undefined;\\n    this.blockProviderChange = false;\\n    let activeElement = this.getActiveElement();\\n    this.previouslyFocused = {\\n      element: activeElement,\\n      start: activeElement.selectionStart,\\n      end: activeElement.selectionEnd,\\n      caretPos: activeElement.selectionEnd\\n    };\\n    this.input.value = '';\\n\\n    if (selection !== undefined) {\\n      this.input.value = selection;\\n    }\\n\\n    if (this.settings.alwaysPassSelection) {\\n      this.input.value += this.getCurrentSelection();\\n    }\\n\\n    this.currentSelection = 0;\\n    this.onInput(this.input.value); //Trigger results on open\\n\\n    this.div.style.display = 'flex';\\n    this.mask.style.opacity = '0.6';\\n    this.input.focus();\\n  }\\n\\n  insertSelectedResult() {\\n    if (!this.isOpened) return;\\n    if (this.currentSelection === 0) return; //TODO: what to do here?\\n\\n    let previous = this.previouslyFocused;\\n    let previousValue = previous.element.value;\\n    if (previousValue === undefined) return;\\n    let selection = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name'); // TODO: early return may cause bug here?\\n\\n    if (!selection) return;\\n\\n    if (previous.start !== previous.end) {\\n      this.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.end);\\n    } else {\\n      this.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.start);\\n    }\\n\\n    this.previouslyFocused.caretPos = previous.start + selection.length;\\n    this.closePalette();\\n  }\\n\\n  closePalette() {\\n    this.div.style.display = 'none';\\n    this.mask.style.opacity = '0';\\n    this.isOpened = false;\\n    this.focusAtCaretPosition(this.previouslyFocused.element, this.previouslyFocused.caretPos);\\n  }\\n\\n  onKeyDown(e) {\\n    if (e.key === 'Escape') {\\n      //\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\\/ There's no previous state\\n      if (!this.settings.escapeGoesBack || this.goBack === undefined) {\\n        this.closePalette();\\n      } else {\\n        this.goBack();\\n        this.goBack = undefined;\\n      }\\n    } else if (e.key === 'ArrowUp') {\\n      e.preventDefault();\\n      e.stopPropagation();\\n      let sel = this.currentSelection - 1;\\n\\n      if (sel === 0) {\\n        if (!this.allowInputFieldSelection) {\\n          sel = this.currentResults.length;\\n        }\\n      } else if (sel < 0) {\\n        sel = this.currentResults.length;\\n      }\\n\\n      this.setSelection(sel);\\n    } else if (e.key === 'ArrowDown') {\\n      e.preventDefault();\\n      e.stopPropagation();\\n      let sel = (this.currentSelection + 1) % (this.currentResults.length + 1);\\n\\n      if (!this.allowInputFieldSelection && sel === 0 && this.currentResults.length !== 0) {\\n        sel = 1;\\n      }\\n\\n      this.setSelection(sel);\\n    } else if (e.key === 'Enter') {\\n      e.preventDefault();\\n      e.stopPropagation();\\n      this.validateSelection(e);\\n    }\\n  }\\n\\n  addResult(result, id) {\\n    let resultDiv = this.createElement('div', {\\n      className: 'commandpaletteresult',\\n      innerText: result.caption || result.name\\n    });\\n\\n    if (result.hint !== undefined) {\\n      let hint = this.createElement('div', {\\n        className: 'commandpalettehint',\\n        innerText: result.hint\\n      });\\n      resultDiv.appendChild(hint);\\n    } // we will get this later\\n\\n\\n    resultDiv.dataset.result = JSON.stringify(result);\\n    /** we use this to pass the action */\\n\\n    if (result.action) {\\n      resultDiv.onabort = result.action;\\n    }\\n\\n    this.currentResults.push(resultDiv);\\n    resultDiv.addEventListener('click', e => {\\n      this.setSelection(id + 1);\\n      this.validateSelection(e);\\n    });\\n    this.scrollDiv.appendChild(resultDiv);\\n  }\\n\\n  getDataFromResultDiv(resultDiv, key) {\\n    var _a;\\n\\n    return JSON.parse((_a = resultDiv.dataset.result) !== null && _a !== void 0 ? _a : '{}')[key];\\n  }\\n\\n  getActionFromResultDiv(resultDiv) {\\n    return resultDiv.onabort;\\n  }\\n\\n  validateSelection(e) {\\n    this.currentResolver(e);\\n  }\\n\\n  defaultResolver(e) {\\n    if (e.getModifierState('Shift')) {\\n      this.input.value = '+' + this.input.value; //this resolver expects that the input starts with +\\n\\n      this.createTiddlerResolver(e);\\n      return;\\n    }\\n\\n    if (this.currentSelection === 0) return;\\n    let selectionTitle = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\\n    this.closePalette();\\n    this.navigateTo(selectionTitle);\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'title' implicitly has an 'any' type.\\n\\n\\n  navigateTo(title) {\\n    this.parentWidget.dispatchEvent({\\n      type: 'tm-navigate',\\n      param: title,\\n      navigateTo: title\\n    });\\n  }\\n\\n  showHistory() {\\n    this.hint.innerText = 'History';\\n\\n    this.currentProvider = terms => {\\n      let results;\\n\\n      if (terms.length === 0) {\\n        results = this.getHistory();\\n      } else {\\n        results = $tw.utils.pinyinfuse(this.getHistory(), terms, ['title']).map(item => item.item);\\n      }\\n\\n      this.showResults(results.map(r => {\\n        return {\\n          name: r.title,\\n          action: () => {\\n            this.navigateTo(r);\\n            this.closePalette();\\n          }\\n        };\\n      }));\\n    };\\n\\n    this.currentResolver = e => {\\n      if (this.currentSelection === 0) return;\\n      this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1]);\\n    };\\n\\n    this.input.value = '';\\n    this.blockProviderChange = true;\\n    this.onInput(this.input.value);\\n  }\\n\\n  setSelectionToFirst() {\\n    let sel = 1;\\n\\n    if (this.allowInputFieldSelection || this.currentResults.length === 0) {\\n      sel = 0;\\n    }\\n\\n    this.setSelection(sel);\\n  }\\n\\n  setSelection(id) {\\n    var _a, _b, _c, _d;\\n\\n    this.currentSelection = id;\\n\\n    for (let i = 0; i < this.currentResults.length; i++) {\\n      let selected = this.currentSelection === i + 1;\\n      this.currentResults[i].className = selected ? 'commandpaletteresult commandpaletteresultselected' : 'commandpaletteresult';\\n    }\\n\\n    if (this.currentSelection === 0) {\\n      this.scrollDiv.scrollTop = 0;\\n      return;\\n    }\\n\\n    let scrollHeight = this.scrollDiv.offsetHeight;\\n    let scrollPos = this.scrollDiv.scrollTop;\\n    let selectionPos = Number((_b = (_a = this.currentResults[this.currentSelection - 1]) === null || _a === void 0 ? void 0 : _a.offsetTop) !== null && _b !== void 0 ? _b : 0);\\n    let selectionHeight = Number((_d = (_c = this.currentResults[this.currentSelection - 1]) === null || _c === void 0 ? void 0 : _c.offsetHeight) !== null && _d !== void 0 ? _d : 0);\\n\\n    if (selectionPos < scrollPos || selectionPos >= scrollPos + scrollHeight) {\\n      //select the closest scrolling position showing the selection\\n      let a = selectionPos;\\n      let b = selectionPos - scrollHeight + selectionHeight;\\n      a = Math.abs(a - scrollPos);\\n      b = Math.abs(b - scrollPos);\\n\\n      if (a < b) {\\n        this.scrollDiv.scrollTop = selectionPos;\\n      } else {\\n        this.scrollDiv.scrollTop = selectionPos - scrollHeight + selectionHeight;\\n      }\\n    }\\n  }\\n\\n  getHistory() {\\n    // TODO: what is the type here?\\n    // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n    let history = $tw.wiki.getTiddlerData('$:/HistoryList');\\n\\n    if (history === undefined) {\\n      history = [];\\n    } // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n\\n    history = [...history.reverse().map(x => x.title), ...$tw.wiki.filterTiddlers('[list[$:/StoryList]]')];\\n    return Array.from(new Set(history.filter(t => this.tiddlerOrShadowExists(t))));\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'title' implicitly has an 'any' type.\\n\\n\\n  tiddlerOrShadowExists(title) {\\n    // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n    return $tw.wiki.tiddlerExists(title) || $tw.wiki.isShadowTiddler(title);\\n  }\\n\\n  defaultProvider(terms) {\\n    this.hint.innerText = 'Search tiddlers (⇧⏎ to create)';\\n    let searches;\\n    if (terms.startsWith('\\\\\\\\')) terms = terms.substr(1);\\n\\n    if (terms.length === 0) {\\n      if (this.settings.showHistoryOnOpen) {\\n        searches = this.getHistory().map(s => {\\n          return {\\n            name: s,\\n            hint: '历史记录'\\n          };\\n        });\\n      } else {\\n        searches = [];\\n      }\\n    } else {\\n      searches = this.searchSteps.reduce((a, c) => [...a, ...c(terms)], []);\\n      searches = Array.from(new Set(searches));\\n    }\\n\\n    this.showResults(searches);\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'filter' implicitly has an 'any' type.\\n\\n\\n  searchStepBuilder(filter, caret, hint) {\\n    return terms => {\\n      let search = filter.substr(0, caret) + terms + filter.substr(caret); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n      let results = $tw.wiki.filterTiddlers(search).map(s => {\\n        return {\\n          name: s,\\n          hint: hint\\n        };\\n      });\\n      return results;\\n    };\\n  }\\n\\n  tagListProvider(terms) {\\n    this.currentSelection = 0;\\n    this.hint.innerText = 'Search tags';\\n    let searches;\\n\\n    if (terms.length === 0) {\\n      // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n      searches = $tw.wiki.filterTiddlers('[!is[system]tags[]][is[system]tags[]][all[shadows]tags[]]');\\n    } else {\\n      // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n      searches = $tw.wiki.filterTiddlers('[all[]tags[]!is[system]pinyinfuse[' + terms + ']][all[]tags[]is[system]pinyinfuse[' + terms + ']][all[shadows]tags[]pinyinfuse[' + terms + ']]');\\n    } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 's' implicitly has an 'any' type.\\n\\n\\n    searches = searches.map(s => {\\n      return {\\n        name: s\\n      };\\n    });\\n    this.showResults(searches);\\n  }\\n\\n  tagListResolver(e) {\\n    if (this.currentSelection === 0) {\\n      let input = this.input.value.substr(1); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n      let exist = $tw.wiki.filterTiddlers('[tag[' + input + ']]');\\n      if (!exist) return;\\n      this.input.value = '@' + input;\\n      return;\\n    }\\n\\n    let result = this.currentResults[this.currentSelection - 1];\\n    this.input.value = '@' + result.innerText;\\n    this.onInput(this.input.value);\\n  }\\n\\n  tagProvider(terms) {\\n    this.currentSelection = 0;\\n    this.hint.innerText = 'Search tiddlers with @tag(s)'; // @ts-expect-error ts-migrate(7034) FIXME: Variable 'searches' implicitly has type 'any[]' in... Remove this comment to see the full error message\\n\\n    let searches = [];\\n\\n    if (terms.length !== 0) {\\n      let {\\n        tags,\\n        searchTerms,\\n        tagsFilter\\n      } = this.parseTags(this.input.value); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n      let taggedTiddlers = $tw.wiki.filterTiddlers(tagsFilter);\\n\\n      if (taggedTiddlers.length !== 0) {\\n        if (tags.length === 1) {\\n          let tag = tags[0];\\n          let tagTiddlerExists = this.tiddlerOrShadowExists(tag);\\n          if (tagTiddlerExists && searchTerms.some(s => tag.includes(s))) searches.push(tag);\\n        }\\n\\n        searches = [...searches, ...taggedTiddlers];\\n      }\\n    } // @ts-expect-error ts-migrate(7005) FIXME: Variable 'searches' implicitly has an 'any[]' type... Remove this comment to see the full error message\\n\\n\\n    searches = searches.map(s => {\\n      return {\\n        name: s\\n      };\\n    });\\n    this.showResults(searches);\\n  }\\n\\n  parseTags(input) {\\n    let splits = input.split(' ').filter(s => s !== '');\\n    let tags = [];\\n    let searchTerms = [];\\n\\n    for (let i = 0; i < splits.length; i++) {\\n      if (splits[i].startsWith('@')) {\\n        tags.push(splits[i].substr(1));\\n        continue;\\n      }\\n\\n      searchTerms.push(splits[i]);\\n    }\\n\\n    let tagsFilter = `[all[tiddlers+system+shadows]${tags.reduce((a, c) => {\\n      return a + 'tag[' + c + ']';\\n    }, '')}]`;\\n\\n    if (searchTerms.length !== 0) {\\n      tagsFilter = tagsFilter.substr(0, tagsFilter.length - 1); //remove last ']'\\n\\n      tagsFilter += `pinyinfuse[${searchTerms.join(' ')}]]`;\\n    }\\n\\n    return {\\n      tags,\\n      searchTerms,\\n      tagsFilter\\n    };\\n  }\\n\\n  settingsProvider(terms) {\\n    var _a, _b, _c;\\n\\n    this.currentSelection = 0;\\n    this.hint.innerText = 'Select the setting you want to change';\\n\\n    let isNumerical = terms => terms.length !== 0 && terms.match(/\\\\D/gm) === null;\\n\\n    let isBoolean = terms => terms.length !== 0 && terms.match(/(true\\\\b)|(false\\\\b)/gim) !== null;\\n\\n    this.showResults([{\\n      name: (_c = 'Theme (currently ' + ((_b = (_a = this.settings.theme) === null || _a === void 0 ? void 0 : _a.match) === null || _b === void 0 ? void 0 : _b.call(_a, /[^\\\\/]*$/))) !== null && _c !== void 0 ? _c : 'no ' + ')',\\n      action: () => this.promptForThemeSetting()\\n    }, this.settingResultBuilder('Max results', 'maxResults', 'Choose the maximum number of results', isNumerical, 'Error: value must be a positive integer'), this.settingResultBuilder('Show history on open', 'showHistoryOnOpen', 'Chose whether to show the history when you open the palette', isBoolean, \\\"Error: value must be 'true' or 'false'\\\"), this.settingResultBuilder('Escape to go back', 'escapeGoesBack', 'Chose whether ESC should go back when possible', isBoolean, \\\"Error: value must be 'true' or 'false'\\\"), this.settingResultBuilder('Use selection as search query', 'alwaysPassSelection', 'Chose your current selection is passed to the command palette', isBoolean, \\\"Error: value must be 'true' or 'false'\\\"), this.settingResultBuilder('Never Basic', 'neverBasic', 'Chose whether to override basic prompts to show filter operation', isBoolean, \\\"Error: value must be 'true' or 'false'\\\"), this.settingResultBuilder('Field preview max size', 'maxResultHintSize', 'Choose the maximum hint length for field preview', isNumerical, 'Error: value must be a positive integer')]);\\n  }\\n\\n  settingResultBuilder(name, settingName, hint, validator, errorMsg) {\\n    return {\\n      name: name + ' (currently ' + this.settings[settingName] + ')',\\n      action: () => this.promptForSetting(settingName, hint, validator, errorMsg)\\n    };\\n  }\\n\\n  settingsResolver(e) {\\n    var _a;\\n\\n    if (this.currentSelection === 0) return;\\n\\n    this.goBack = () => {\\n      this.input.value = '|';\\n      this.blockProviderChange = false;\\n      this.onInput(this.input.value);\\n    };\\n\\n    (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\\n  }\\n\\n  promptForThemeSetting() {\\n    this.blockProviderChange = true;\\n    this.allowInputFieldSelection = false;\\n\\n    this.currentProvider = terms => {\\n      this.currentSelection = 0;\\n      this.hint.innerText = 'Choose a theme';\\n      let defaultValue = this.defaultSettings['theme'];\\n      let results = [{\\n        name: 'Revert to default value: ' + defaultValue.match(/[^\\\\/]*$/),\\n        action: () => {\\n          this.setSetting('theme', defaultValue); // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\\n\\n          this.refreshThemes();\\n        }\\n      }];\\n\\n      for (let theme of this.themes) {\\n        let name = theme.fields.title;\\n        let shortName = name.match(/[^\\\\/]*$/);\\n\\n        let action = () => {\\n          this.setSetting('theme', name); // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\\n\\n          this.refreshThemes();\\n        };\\n\\n        results.push({\\n          name: shortName,\\n          action: action\\n        });\\n      }\\n\\n      this.showResults(results);\\n    };\\n\\n    this.currentResolver = e => {\\n      var _a;\\n\\n      (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\\n    };\\n\\n    this.input.value = '';\\n    this.onInput(this.input.value);\\n  }\\n\\n  promptForSetting(settingName, hint, validator, errorMsg) {\\n    this.blockProviderChange = true;\\n    this.allowInputFieldSelection = true;\\n\\n    this.currentProvider = terms => {\\n      this.currentSelection = 0;\\n      this.hint.innerText = hint;\\n      let defaultValue = this.defaultSettings[settingName];\\n      let results = [{\\n        name: 'Revert to default value: ' + defaultValue,\\n        action: () => this.setSetting(settingName, defaultValue)\\n      }];\\n\\n      if (!validator(terms)) {\\n        results.push({\\n          name: errorMsg,\\n          action: () => {}\\n        });\\n      }\\n\\n      this.showResults(results);\\n    };\\n\\n    this.currentResolver = e => {\\n      if (this.currentSelection === 0) {\\n        let input = this.input.value;\\n\\n        if (validator(input)) {\\n          this.setSetting(settingName, input);\\n          this.goBack = undefined;\\n          this.blockProviderChange = false;\\n          this.allowInputFieldSelection = false;\\n          this.promptCommand('|');\\n        }\\n      } else {\\n        let action = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1]);\\n\\n        if (action) {\\n          action(e);\\n          this.goBack = undefined;\\n          this.blockProviderChange = false;\\n          this.allowInputFieldSelection = false;\\n          this.promptCommand('|');\\n        }\\n      }\\n    };\\n\\n    this.input.value = this.settings[settingName];\\n    this.onInput(this.input.value);\\n  }\\n\\n  showResults(results) {\\n    var _a;\\n\\n    for (let cur of this.currentResults) {\\n      cur.remove();\\n    }\\n\\n    this.currentResults = [];\\n    let resultCount = 0;\\n\\n    for (let result of results) {\\n      this.addResult(result, resultCount);\\n      resultCount++;\\n      if (resultCount >= ((_a = this.settings.maxResults) !== null && _a !== void 0 ? _a : this.defaultSettings.maxResults)) break;\\n    }\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'message' implicitly has an 'any' type.\\n\\n\\n  tmMessageBuilder(message, params = {}) {\\n    return e => {\\n      let event = {\\n        type: message,\\n        paramObject: params,\\n        event: e\\n      };\\n      this.parentWidget.dispatchEvent(event);\\n    };\\n  }\\n\\n  actionProvider(terms) {\\n    this.currentSelection = 0;\\n    this.hint.innerText = 'Search commands';\\n    let results;\\n\\n    if (terms.length === 0) {\\n      results = this.getCommandHistory();\\n    } else {\\n      /**\\n       * {\\n              item: T;\\n              refIndex: number;\\n              score?: number | undefined;\\n              matches?: readonly Fuse.FuseResultMatch[] | undefined;\\n          }\\n       */\\n      results = $tw.utils.pinyinfuse(this.actions, terms.toLowerCase(), ['name', 'caption']).map(item => item.item);\\n    }\\n\\n    this.showResults(results);\\n  }\\n\\n  helpProvider(terms) {\\n    //TODO: tiddlerify?\\n    this.currentSelection = 0;\\n    this.hint.innerText = 'Help';\\n    let searches = [{\\n      name: '... Search',\\n      action: () => this.promptCommand('')\\n    }, {\\n      name: '> Commands',\\n      action: () => this.promptCommand('>')\\n    }, {\\n      name: '+ Create tiddler with title',\\n      action: () => this.promptCommand('+')\\n    }, {\\n      name: '# Search tags',\\n      action: () => this.promptCommand('#')\\n    }, {\\n      name: '@ List tiddlers with tag',\\n      action: () => this.promptCommand('@')\\n    }, {\\n      name: '[ Filter operation',\\n      action: () => this.promptCommand('[')\\n    }, {\\n      name: '| Command Palette Settings',\\n      action: () => this.promptCommand('|')\\n    }, {\\n      name: '\\\\\\\\ Escape first character',\\n      action: () => this.promptCommand('\\\\\\\\')\\n    }, {\\n      name: '? Help',\\n      action: () => this.promptCommand('?')\\n    }];\\n    this.showResults(searches);\\n  }\\n\\n  filterProvider(terms, hint) {\\n    var _a;\\n\\n    this.currentSelection = 0;\\n    this.hint.innerText = hint === undefined ? 'Filter operation' : hint;\\n    terms = '[' + terms; // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    let fields = $tw.wiki.filterTiddlers('[fields[]]'); // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n    let results = $tw.wiki.filterTiddlers(terms).map(r => {\\n      return {\\n        name: r\\n      };\\n    }); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'i' implicitly has an 'any' type.\\n\\n    let insertResult = (i, result) => results.splice(i + 1, 0, result);\\n\\n    for (let i = 0; i < results.length; i++) {\\n      let initialResult = results[i];\\n      let alreadyMatched = false;\\n      let date = 'Invalid Date';\\n\\n      if (initialResult.name.length === 17) {\\n        //to be sure to only match tiddly dates (17 char long)\\n        // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n        date = $tw.utils.parseDate(initialResult.name).toLocaleString();\\n      }\\n\\n      if (date !== 'Invalid Date') {\\n        results[i].hint = date;\\n\\n        results[i].action = () => {};\\n\\n        alreadyMatched = true;\\n      } // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n\\n\\n      let isTag = $tw.wiki.getTiddlersWithTag(initialResult.name).length !== 0;\\n\\n      if (isTag) {\\n        if (alreadyMatched) {\\n          insertResult(i, Object.assign({}, results[i]));\\n          i += 1;\\n        }\\n\\n        results[i].action = () => this.promptCommand('@' + initialResult.name);\\n\\n        results[i].hint = 'Tag'; //Todo more info?\\n\\n        alreadyMatched = true;\\n      }\\n\\n      let isTiddler = this.tiddlerOrShadowExists(initialResult.name);\\n\\n      if (isTiddler) {\\n        if (alreadyMatched) {\\n          insertResult(i, Object.assign({}, results[i]));\\n          i += 1;\\n        }\\n\\n        results[i].action = () => {\\n          this.navigateTo(initialResult.name);\\n          this.closePalette();\\n        };\\n\\n        results[i].hint = 'Tiddler';\\n        alreadyMatched = true;\\n      }\\n\\n      let isField = fields.includes(initialResult.name);\\n\\n      if (isField) {\\n        if (alreadyMatched) {\\n          insertResult(i, Object.assign({}, results[i]));\\n          i += 1;\\n        }\\n\\n        let parsed;\\n\\n        try {\\n          // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n          parsed = $tw.wiki.parseFilter(this.input.value);\\n        } catch (e) {} //The error is already displayed to the user\\n\\n\\n        let foundTitles = [];\\n\\n        for (let node of parsed || []) {\\n          if (node.operators.length !== 2) continue;\\n\\n          if (node.operators[0].operator === 'title' && node.operators[1].operator === 'fields') {\\n            foundTitles.push(node.operators[0].operand);\\n          }\\n        }\\n\\n        let hint = 'Field';\\n\\n        if (foundTitles.length === 1) {\\n          // @ts-expect-error ts-migrate(2304) FIXME: Cannot find name '$tw'.\\n          hint = $tw.wiki.getTiddler(foundTitles[0]).fields[initialResult.name]; // @ts-expect-error ts-migrate(2358) FIXME: The left-hand side of an 'instanceof' expression m... Remove this comment to see the full error message\\n\\n          if (hint instanceof Date) {\\n            hint = hint.toLocaleString();\\n          }\\n\\n          hint = hint.toString().replace(/(\\\\r\\\\n|\\\\n|\\\\r)/gm, '');\\n          let maxSize = ((_a = this.settings.maxResultHintSize) !== null && _a !== void 0 ? _a : this.defaultSettings.maxResultHintSize) - 3;\\n\\n          if (hint.length > maxSize) {\\n            hint = hint.substring(0, maxSize);\\n            hint += '...';\\n          }\\n        }\\n\\n        results[i].hint = hint;\\n\\n        results[i].action = () => {};\\n\\n        alreadyMatched = true;\\n      } // let isContentType = terms.includes('content-type');\\n\\n    }\\n\\n    this.showResults(results);\\n  }\\n\\n  filterResolver(e) {\\n    var _a;\\n\\n    if (this.currentSelection === 0) return;\\n    (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\\n    e.stopPropagation();\\n  }\\n\\n  helpResolver(e) {\\n    var _a;\\n\\n    if (this.currentSelection === 0) return;\\n    (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\\n    e.stopPropagation();\\n  }\\n\\n  createTiddlerProvider(terms) {\\n    this.currentSelection = 0;\\n    this.hint.innerText = 'Create new tiddler with title @tag(s)';\\n    this.showResults([]);\\n  }\\n\\n  createTiddlerResolver(e) {\\n    let {\\n      tags,\\n      searchTerms\\n    } = this.parseTags(this.input.value.substr(1));\\n    let title = searchTerms.join(' '); // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'any[]'.\\n\\n    tags = tags.join(' ');\\n    this.tmMessageBuilder('tm-new-tiddler', {\\n      title: title,\\n      tags: tags\\n    })(e);\\n    this.closePalette();\\n  }\\n\\n  promptCommand(value, caret) {\\n    this.blockProviderChange = false;\\n    this.input.value = value;\\n    this.input.focus();\\n\\n    if (caret !== undefined) {\\n      this.input.setSelectionRange(caret, caret);\\n    }\\n\\n    this.onInput(this.input.value);\\n  }\\n\\n  promptCommandBasic(value, caret, hint) {\\n    // TODO: I delete this.settings.neverBasic === 'true' ||  here, see if cause bug\\n    if (this.settings.neverBasic === true) {\\n      //TODO: validate settings to avoid unnecessary checks\\n      this.promptCommand(value, caret);\\n      return;\\n    }\\n\\n    this.input.value = '';\\n    this.blockProviderChange = true;\\n    this.currentProvider = this.basicProviderBuilder(value, caret, hint);\\n    this.onInput(this.input.value);\\n  }\\n\\n  basicProviderBuilder(value, caret, hint) {\\n    let start = value.substr(0, caret);\\n    let end = value.substr(caret); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'input' implicitly has an 'any' type.\\n\\n    return input => {\\n      let {\\n        resolver,\\n        provider,\\n        terms\\n      } = this.parseCommand(start + input + end);\\n      let backgroundProvider = provider;\\n      backgroundProvider(terms, hint);\\n      this.currentResolver = resolver;\\n    };\\n  }\\n\\n  getCommandHistory() {\\n    var _a; // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'h' implicitly has an 'any' type.\\n\\n\\n    this.history = this.history.filter(h => this.actions.some(a => a.name === h)); //get rid of deleted command that are still in history;\\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'h' implicitly has an 'any' type.\\n\\n    let results = this.history.map(h => this.actions.find(a => a.name === h));\\n\\n    while (results.length <= ((_a = this.settings.maxResults) !== null && _a !== void 0 ? _a : this.defaultSettings.maxResults)) {\\n      let nextDefaultAction = this.actions.find(a => !results.includes(a));\\n      if (nextDefaultAction === undefined) break;\\n      results.push(nextDefaultAction);\\n    }\\n\\n    return results;\\n  }\\n\\n  actionResolver(e) {\\n    var _a;\\n\\n    e.preventDefault();\\n    e.stopPropagation();\\n    if (this.currentSelection === 0) return;\\n    let result = this.actions.find(a => a.name === this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name'));\\n    if (!result) return;\\n\\n    if (result.keepPalette) {\\n      let curInput = this.input.value;\\n\\n      this.goBack = () => {\\n        this.input.value = curInput;\\n        this.blockProviderChange = false;\\n        this.onInput(this.input.value);\\n      };\\n    }\\n\\n    this.updateCommandHistory(result);\\n    (_a = result.action) === null || _a === void 0 ? void 0 : _a.call(result, e);\\n\\n    if (result.immediate) {\\n      this.validateSelection(e);\\n      return;\\n    }\\n\\n    if (!result.keepPalette) {\\n      this.closePalette();\\n    }\\n  }\\n\\n  getCurrentSelection() {\\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\\n    let selection = window.getSelection().toString();\\n    if (selection !== '') return selection;\\n    let activeElement = this.getActiveElement();\\n    if (activeElement === undefined || activeElement.selectionStart === undefined) return '';\\n\\n    if (activeElement.selectionStart > activeElement.selectionEnd) {\\n      return activeElement.value.substring(activeElement.selectionStart, activeElement.selectionEnd);\\n    } else {\\n      return activeElement.value.substring(activeElement.selectionEnd, activeElement.selectionStart);\\n    }\\n  } // @ts-expect-error ts-migrate(7023) FIXME: 'getActiveElement' implicitly has return type 'any... Remove this comment to see the full error message\\n\\n\\n  getActiveElement(element = document.activeElement) {\\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\\n    const shadowRoot = element.shadowRoot; // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\\n\\n    const contentDocument = element.contentDocument;\\n\\n    if (shadowRoot && shadowRoot.activeElement) {\\n      return this.getActiveElement(shadowRoot.activeElement);\\n    }\\n\\n    if (contentDocument && contentDocument.activeElement) {\\n      return this.getActiveElement(contentDocument.activeElement);\\n    }\\n\\n    return element;\\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'el' implicitly has an 'any' type.\\n\\n\\n  focusAtCaretPosition(el, caretPos) {\\n    if (el !== null) {\\n      el.value = el.value; // ^ this is used to not only get \\\"focus\\\", but\\n      // to make sure we don't have it everything -selected-\\n      // (it causes an issue in chrome, and having it doesn't hurt any other browser)\\n\\n      if (el.createTextRange) {\\n        var range = el.createTextRange();\\n        range.move('character', caretPos);\\n        range.select();\\n        return true;\\n      } else {\\n        // (el.selectionStart === 0 added for Firefox bug)\\n        if (el.selectionStart || el.selectionStart === 0) {\\n          el.focus();\\n          el.setSelectionRange(caretPos, caretPos);\\n          return true;\\n        } else {\\n          // fail city, fortunately this never happens (as far as I've tested) :)\\n          el.focus();\\n          return false;\\n        }\\n      }\\n    }\\n  }\\n\\n  createElement(name, proprieties, styles) {\\n    let el = this.document.createElement(name);\\n\\n    for (let [propriety, value] of Object.entries(proprieties || {})) {\\n      // @ts-expect-error ts-migrate(2304) FIXME: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'HTMLDivElement'. No index signature with a parameter of type 'string' was found on type 'HTMLDivElement'.ts(7053)\\n      el[propriety] = value;\\n    }\\n\\n    for (let [style, value] of Object.entries(styles || {})) {\\n      el.style[style] = value;\\n    }\\n\\n    return el;\\n  }\\n  /*\\n            Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n            */\\n\\n\\n  refresh() {\\n    return false;\\n  }\\n\\n}\\n\\nexports.commandpalettewidget = CommandPaletteWidget;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZFBhbGV0dGVXaWRnZXQuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/linonetwo/commandpalette/Compact.css\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Compact.css\",\"created\":\"20200603190000307\",\"modified\":\"20200623022617588\",\"tags\":\"$:/tags/CommandPaletteTheme $:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\\n:root {\\n    --palette-radius: 5px;\\n}\\n.commandpalette {\\n    position: fixed;\\n    background: <<colour background>>;\\n    z-index: 9999;\\n    left: 50%;\\n    top: 10%;\\n    transform: translate(-50%, 0%);\\n    width: 500px;\\n    display: none;\\n    flex-direction: column;\\n    font-size: 21px;\\n    border-radius: var(--palette-radius);\\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\\n    border: 2px solid <<colour page-background>>;\\n}\\n@media (max-width: 540px) {\\n  .commandpalette {\\n    width: calc(100vw - 40px);\\n  }\\n}\\n.commandpalette-masklayer {\\n    position: fixed;\\n    z-index: 9998;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    width: 100vw;\\n    height: 100vh;\\n    background: <<colour background>>;\\n    opacity: 0;\\n    filter: contrast(130%);\\n  min-width: 200px !important;\\n  transition: all {{$:/config/AnimationDuration}}ms;\\n  pointer-events: none;\\n}\\n.inputhintwrapper {\\n    display: flex;\\n    align-items: center;\\n    border-bottom: 1px solid <<colour page-background>>;\\n}\\n.commandpalette input {\\n    border: 0;\\n    background: 0;\\n    height: 40px;\\n    color: <<colour foreground>>;\\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\\n    outline: 0;\\n    min-width: 50px;\\n    flex: 1;\\n    padding-left: 7px;\\n}\\n.commandpalettehint {\\n    color:  <<colour foreground>>;\\n    font-size: 13px;\\n    text-align: right;\\n    flex-shrink: 0;\\n    padding-right: 7px;\\n    opacity: 0.6;\\n}\\n.commandpaletteresultselected>.commandpalettehint {\\n    color: <<colour background>>;\\n    opacity: 1;\\n}\\n.commandpalettehintmain {\\n\\n}\\n.commandpaletteresult {\\n    background: <<colour background>>;\\n    font-size: 15px;\\n    color: <<colour foreground>>;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    padding-left: 6px;\\n    padding-top: 4px;\\n    padding-bottom: 4px;\\n    cursor: pointer;\\n}\\n.commandpaletteresult:not(:last-child) {\\n    border-bottom: <<colour page-background>> solid 1px;\\n}\\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\\n    background: <<colour page-background>>;\\n}\\n.commandpaletteresultselected {\\n    background: <<colour primary>>;\\n    color: <<colour page-background>>;\\n}\\n.cp-scroll{\\n    max-height: 50vh;\\n    overflow-y: auto;\\n    position: relative;\\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\\n}\\n\"},\"$:/plugins/linonetwo/commandpalette/ControlPanel Command\":{\"title\":\"$:/plugins/linonetwo/commandpalette/ControlPanel Command\",\"command-palette-name\":\"Show Control Panel\",\"command-palette-type\":\"actionString\",\"command-palette-caption\":\"打开命令菜单\",\"command-palette-hint\":\"打开命令菜单\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-navigate $to=\\\"$:/ControlPanel\\\"/>\"},\"$:/plugins/linonetwo/commandpalette/Delete Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Delete Tiddler\",\"command-palette-name\":\"Delete Tiddler\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Delete/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Delete/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-delete-tiddler\\n\"},\"$:/plugins/linonetwo/commandpalette/Edit Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Edit Tiddler\",\"command-palette-name\":\"Edit Tiddler\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Edit/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Edit/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-edit-tiddler\\n\"},\"$:/plugins/linonetwo/commandpalette/Filter operation\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Filter operation\",\"command-palette-name\":\"Filter operation\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"{{$:/language/Buttons/AdvancedSearch/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/AdvancedSearch/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[\\n\"},\"$:/plugins/linonetwo/commandpalette/Fold All Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Fold All Tiddlers\",\"command-palette-name\":\"Fold All Tiddlers\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/FoldAll/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/FoldAll/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-fold-all-tiddlers\\n\"},\"$:/plugins/linonetwo/commandpalette/Home\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Home\",\"command-palette-name\":\"Home\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/Home/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Home/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-home\\n\"},\"$:/plugins/linonetwo/commandpalette/InsertCommandPaletteResult\":{\"title\":\"$:/plugins/linonetwo/commandpalette/InsertCommandPaletteResult\",\"key\":\"((insert-command-palette-result))\",\"tags\":\"$:/tags/KeyboardShortcut\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"insert-command-palette-result\\\"/>\"},\"$:/plugins/linonetwo/commandpalette/New Journal Command\":{\"title\":\"$:/plugins/linonetwo/commandpalette/New Journal Command\",\"command-palette-name\":\"New Journal\",\"command-palette-type\":\"actionString\",\"command-palette-caption\":\"{{$:/language/Buttons/NewJournal/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/NewJournal/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/core/ui/Actions/new-journal}}\\n\"},\"$:/plugins/linonetwo/commandpalette/New Tiddler with title\":{\"title\":\"$:/plugins/linonetwo/commandpalette/New Tiddler with title\",\"command-palette-name\":\"New Tiddler with title\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"以标题{{$:/language/Buttons/NewTiddler/Caption}}\",\"command-palette-hint\":\"以标题{{$:/language/Buttons/NewTiddler/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"+\\n\"},\"$:/plugins/linonetwo/commandpalette/New Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/New Tiddler\",\"command-palette-name\":\"New Tiddler\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/NewTiddler/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/NewTiddler/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-new-tiddler\\n\"},\"$:/core/ui/Buttons/CommandPalette\":{\"title\":\"$:/core/ui/Buttons/CommandPalette\",\"caption\":\"{{$:/core/images/advanced-search-button}} Command Palette\",\"description\":\"Open Command Palette\",\"tags\":\"$:/tags/PageControls\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$button class=<<tv-config-toolbar-class>> message=\\\"open-command-palette\\\" tooltip=\\\"Open Command Palette\\\" aria-label=\\\"Command Palette\\\"><$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">{{$:/core/images/advanced-search-button}}</$list><$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\"><span class=\\\"tc-btn-text\\\"><$text text=\\\"Command Palette\\\"/></span></$list></$button>\\n\"},\"$:/plugins/linonetwo/commandpalette/Original.css\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Original.css\",\"tags\":\"$:/tags/CommandPaletteTheme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\\n:root {\\n    --palette-radius: 5px;\\n}\\n.commandpalette {\\n    position: fixed;\\n    background:<<colour page-background>>;\\n    z-index: 9999;\\n    left: 50%;\\n    top: 10%;\\n    transform: translate(-50%, 0%);\\n    width: 500px;\\n    display: none;\\n    flex-direction: column;\\n    font-size: 21px;\\n    border-radius: var(--palette-radius);\\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\\n    border: 4px solid rgba(0, 0, 0, 0);\\n}\\n@media (max-width: 540px) {\\n  .commandpalette {\\n    width: calc(100vw - 40px);\\n  }\\n}\\n.commandpalette-masklayer {\\n    position: fixed;\\n    z-index: 9998;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    width: 100vw;\\n    height: 100vh;\\n    background: <<colour background>>;\\n    opacity: 0;\\n    filter: contrast(130%);\\n  min-width: 200px !important;\\n  transition: all {{$:/config/AnimationDuration}}ms;\\n  pointer-events: none;\\n}\\n.commandpalette input {\\n    border: 0;\\n    height: 40px;\\n    color: <<colour foreground>>;\\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\\n    padding-left: 11px;\\n    padding-right: 11px;\\n    width: 100%;\\n    outline: 0;\\n}\\n.commandpalettehint {\\n    color:  <<colour foreground>>;\\n    font-size: 13px;\\n    text-align: right;\\n    flex-shrink: 0;\\n    padding-right: 7px;\\n    opacity: 0.6;\\n}\\n.commandpaletteresultselected>.commandpalettehint {\\n    color: <<colour background>>;\\n    opacity: 1;\\n}\\n.commandpalettehintmain {\\n}\\n.commandpaletteresult {\\n    background: <<colour background>>;\\n    font-size: 15px;\\n    color: <<colour foreground>>;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    padding-left: 6px;\\n    padding-top: 4px;\\n    padding-bottom: 4px;\\n    cursor: pointer;\\n}\\n.commandpaletteresult:not(:last-child) {\\n    border-bottom: <<colour page-background>> solid 1px;\\n}\\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\\n    background: <<colour page-background>>;\\n}\\n.commandpaletteresultselected {\\n    background: <<colour primary>>;\\n    color: <<colour page-background>>;\\n}\\n.cp-scroll{\\n    max-height: 50vh;\\n    overflow-y: auto;\\n    position: relative;\\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\\n}\\n\"},\"$:/plugins/linonetwo/commandpalette/Permalink\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Permalink\",\"command-palette-name\":\"Permalink\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Permalink/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Permalink/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-permalink\\n\"},\"$:/plugins/linonetwo/commandpalette/Permaview\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Permaview\",\"command-palette-name\":\"Permaview\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/Permaview/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Permaview/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-permaview\\n\"},\"$:/plugins/linonetwo/commandpalette/Print\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Print\",\"command-palette-name\":\"Print\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/Print/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Print/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-print\\n\"},\"$:/plugins/linonetwo/commandpalette/Recent Tiddlers Command\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Recent Tiddlers Command\",\"command-palette-caret\":\"33\",\"command-palette-name\":\"Recent Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看最近编辑过的Tiddler\",\"command-palette-hint\":\"在命令菜单里列出最近编辑过的Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!is[system]!sort[created]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/Refresh Server\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Refresh Server\",\"command-palette-name\":\"Refresh Server\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"服务器{{$:/language/Buttons/Refresh/Caption}}\",\"command-palette-hint\":\"服务器{{$:/language/Buttons/Refresh/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-server-refresh\\n\"},\"$:/plugins/linonetwo/commandpalette/Save Tiddler\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Save Tiddler\",\"command-palette-mode\":\"drafts\",\"command-palette-name\":\"Save Tiddler\",\"command-palette-type\":\"history\",\"command-palette-caption\":\"{{$:/language/Buttons/Save/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/Save/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-save-tiddler\\n\"},\"$:/plugins/linonetwo/commandpalette/Save Wiki\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Save Wiki\",\"command-palette-name\":\"Save Wiki\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/SaveWiki/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/SaveWiki/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-save-wiki\\n\"},\"$:/plugins/linonetwo/commandpalette/Search Tags\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Search Tags\",\"command-palette-name\":\"Search Tags\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"搜索标签列表\",\"command-palette-hint\":\"在命令菜单里列出搜索到的标签\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"#\\n\"},\"$:/plugins/linonetwo/commandpalette/Search fields\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Search fields\",\"command-palette-caret\":\"16\",\"command-palette-name\":\"Search fields\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"搜索字段名\",\"command-palette-hint\":\"在命令菜单里搜索列出所有Wiki里涉及到的字段名\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[fields[]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/Search tiddlers with tag\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Search tiddlers with tag\",\"command-palette-name\":\"Search tiddlers with tag\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"带某个标签的Tiddler\",\"command-palette-hint\":\"在命令菜单里列出带某个标签的Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"@\\n\"},\"$:/plugins/linonetwo/commandpalette/Search\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Search\",\"command-palette-name\":\"Search\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"{{$:/language/Buttons/AdvancedSearch/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/AdvancedSearch/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/plugins/linonetwo/commandpalette/See Drafts\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Drafts\",\"command-palette-caret\":\"27\",\"command-palette-name\":\"See Drafts\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看草稿Tiddler\",\"command-palette-hint\":\"在命令菜单里列出所有处于草稿状态的Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[has:field[draft.of]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See Languages\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Languages\",\"command-palette-caret\":\"43\",\"command-palette-name\":\"See Languages\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看语言列表\",\"command-palette-hint\":\"在命令菜单里列出语言列表\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!has[draft.of]plugin-type[language]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See Missing Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Missing Tiddlers\",\"command-palette-caret\":\"20\",\"command-palette-name\":\"See Mising Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看缺失的Tiddler\",\"command-palette-hint\":\"在命令菜单里列出缺失的Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[missing]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See Orphans Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Orphans Tiddlers\",\"command-palette-caret\":\"20\",\"command-palette-name\":\"See Orphans Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看孤儿Tiddler\",\"command-palette-hint\":\"在命令菜单里列出孤儿Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[orphans]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See Plugins\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Plugins\",\"command-palette-caret\":\"41\",\"command-palette-name\":\"See Plugins\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看插件列表\",\"command-palette-hint\":\"在命令菜单里列出插件列表\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!has[draft.of]plugin-type[plugin]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See Shadows Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Shadows Tiddlers\",\"command-palette-caret\":\"20\",\"command-palette-name\":\"See Shadows Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看系统Tiddler\",\"command-palette-hint\":\"在命令菜单里列出系统Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[shadows]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See Story List\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Story List\",\"command-palette-caret\":\"26\",\"command-palette-name\":\"See Story List\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看开启的Tiddler\",\"command-palette-hint\":\"在命令菜单里列出开启的Tiddler\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[list[$:/StoryList]search[]]\"},\"$:/plugins/linonetwo/commandpalette/See Themes\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See Themes\",\"command-palette-caret\":\"40\",\"command-palette-name\":\"See Themes\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看主题\",\"command-palette-hint\":\"列出可用主题\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[!has[draft.of]plugin-type[theme]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See all content-types\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See all content-types\",\"command-palette-caret\":\"48\",\"command-palette-name\":\"See all content-type\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看内容类型\",\"command-palette-hint\":\"在命令菜单里列出所有Wiki里涉及到的内容类型\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[tiddlers+shadows]each[type]get[type]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/See untagged tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/See untagged tiddlers\",\"command-palette-caret\":\"29\",\"command-palette-name\":\"See untagged Tiddlers\",\"command-palette-type\":\"prompt-basic\",\"command-palette-caption\":\"查看未打标签的Tiddler\",\"command-palette-hint\":\"在命令菜单里列出未打标签的Tiddler列表\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[untagged[]!is[system]search[]]\\n\"},\"$:/plugins/linonetwo/commandpalette/Show help\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Show help\",\"command-palette-name\":\"Show help\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"展示帮助\",\"command-palette-hint\":\"列出有哪些用法\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"?\\n\"},\"$:/plugins/linonetwo/commandpalette/Toggle Fullscreen\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Toggle Fullscreen\",\"command-palette-name\":\"Toggle Fullscreen\",\"command-palette-type\":\"message\",\"command-palette-caption\":\"{{$:/language/Buttons/FullScreen/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/FullScreen/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"tm-full-screen\\n\"},\"$:/plugins/linonetwo/commandpalette/Unfold All Tiddlers\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Unfold All Tiddlers\",\"command-palette-name\":\"Unfold All Tiddlers\",\"command-palette-type\":\"actionString\",\"command-palette-caption\":\"{{$:/language/Buttons/UnfoldAll/Caption}}\",\"command-palette-hint\":\"{{$:/language/Buttons/UnfoldAll/Hint}}\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage $message=\\\"tm-unfold-all-tiddlers\\\" foldedStatePrefix=\\\"$:/state/folded/\\\"/>\\n\"},\"$:/plugins/linonetwo/commandpalette/Version\":{\"title\":\"$:/plugins/linonetwo/commandpalette/Version\",\"command-palette-caret\":\"49\",\"command-palette-name\":\"Version\",\"command-palette-type\":\"prompt-basic\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[$:/plugins/linonetwo/commandpalette]get[version]]\"},\"$:/plugins/linonetwo/commandpalette/View\":{\"title\":\"$:/plugins/linonetwo/commandpalette/View\",\"tags\":\"$:/tags/AboveStory\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$commandpalettewidget/>\\n\"},\"$:/plugins/linonetwo/itonnote/readme\":{\"title\":\"$:/plugins/linonetwo/itonnote/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"此插件基于[[Souk21/TW-commandpalette|https://github.com/Souk21/TW-commandpalette]]，非常感谢他的工作，在过去的一年里这个插件极大地为我提高了工作效率。我将它主要源码复制过来汉化并加入拼音搜索功能，以便我们更灵活地在中文环境下使用。\\n\\n!! 功能\\n\\n按下 ctrl/cmd + P 唤起搜索框，按的时候如果多加一个 shift 可以唤起功能框。\\n\\n搜索的时候可以打拼音。\\n\"},\"$:/plugins/linonetwo/commandpalette/show tiddler commands\":{\"title\":\"$:/plugins/linonetwo/commandpalette/show tiddler commands\",\"command-palette-name\":\"Show CommandTiddlers\",\"command-palette-type\":\"prompt\",\"command-palette-caption\":\"展示可用命令Tiddler列表\",\"command-palette-hint\":\"列出命令菜单的命令来自哪些Tiddlers\",\"tags\":\"$:/tags/CommandPaletteCommand\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"@$:/tags/CommandPaletteCommand\\n\"}}}"}