{"title":"$:/plugins/linonetwo/google-calendar-import","name":"Google Calendar Import","description":"Import the Google Calendar events into your TiddlyWiki","author":"LinOnetwo","core-version":">=5.1.22","plugin-type":"plugin","version":"0.0.1","list":"readme developer","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"GoogleCalendarImportButton\":{\"title\":\"GoogleCalendarImportButton\",\"text\":\"/*\\\\\\ntype: application/javascript\\nmodule-type: widget\\n\\nImport Google Calendar event of today into TiddlyWiki\\nUsage: <$import-google-calendar-event tags=\\\"private GoogleCalendar\\\" />\\nAttributes: yesterday=\\\"yes\\\"\\n\\n\\\\*/\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: true */\\n  'use strict';\\n\\n  const Widget = require('$:/core/modules/widgets/widget.js').widget;\\n\\n  class GoogleCalendarToTiddlyWikiWidget extends Widget {\\n    /**\\n     * Lifecycle method: call this.initialise and super\\n     */\\n    constructor(parseTreeNode, options) {\\n      super(parseTreeNode, options);\\n      this.initialise(parseTreeNode, options);\\n      this.state = {\\n        isSignedIn: false,\\n      };\\n    }\\n\\n    /**\\n     * Lifecycle method: Render this widget into the DOM\\n     */\\n    render(parent, nextSibling) {\\n      this.parentDomNode = parent;\\n      this.computeAttributes();\\n      const importButton = this.document.createElement('button');\\n      importButton.appendChild(\\n        this.document.createTextNode(this.state.isSignedIn ? this.getAttribute('label') || 'Import Calendar' : 'Login to Google')\\n      );\\n      importButton.onclick = this.onImportButtonClick.bind(this);\\n      parent.insertBefore(importButton, nextSibling);\\n      this.domNodes.push(importButton);\\n      this.initClient();\\n    }\\n\\n    /**\\n     * Event listener of button\\n     */\\n    async onImportButtonClick() {\\n      if (!this.state.isSignedIn) {\\n        try {\\n          // await this.initClient(); // we have init it in the constructor\\n          gapi.auth2.getAuthInstance().signIn();\\n        } catch (error) {\\n          console.error('GoogleCalendarToTiddlyWikiWidget: Error login using gapi client', error);\\n        }\\n      } else {\\n        try {\\n          await this.importToWiki();\\n        } catch (error) {\\n          console.error('GoogleCalendarToTiddlyWikiWidget: Error importToWiki', error);\\n        }\\n      }\\n    }\\n\\n    /**\\n     *  Initializes the API client library and sets up sign-in state\\n     *  listeners.\\n     */\\n    async initClient() {\\n      console.log('init');\\n      // on start up, it might not be loaded, we schedule it later\\n      if (!window.gapi) {\\n        setTimeout(this.initClient.bind(this), 100);\\n        return;\\n      }\\n\\n      // Client ID and API key from the Google Developer Console\\n      // we get it from tiddler\\n      const CLIENT_ID = $tw.wiki.getTiddler('GoogleCalendarCLIENT_ID').fields.text;\\n      const API_KEY = $tw.wiki.getTiddler('GoogleCalendarAPI_KEY').fields.text;\\n\\n      // Array of API discovery doc URLs for APIs used by the script\\n      const DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\\n      // Authorization scopes required by the API; multiple scopes can be\\n      // included, separated by spaces.\\n      const SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';\\n      await new Promise((resolve) => gapi.load('client:auth2', resolve));\\n      await gapi.client.init({\\n        apiKey: API_KEY,\\n        clientId: CLIENT_ID,\\n        discoveryDocs: DISCOVERY_DOCS,\\n        scope: SCOPES,\\n      });\\n      // Listen for sign-in state changes.\\n      gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus.bind(this));\\n      // Handle the initial sign-in state.\\n      this.updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\\n    }\\n\\n    /**\\n     *  Called when the signed in status changes, to update the UI\\n     *  appropriately. After a sign-in, the API is called.\\n     */\\n    updateSignInStatus(isSignedIn) {\\n      const prevState = { ...this.state };\\n      if (isSignedIn) {\\n        this.state.isSignedIn = true;\\n      } else {\\n        this.state.isSignedIn = false;\\n      }\\n      // this is like React forceUpdate, we use it because it is not fully reactive on this.state change\\n      if (prevState.isSignedIn !== isSignedIn) {\\n        this.refreshSelf(); // method from super class\\n      }\\n    }\\n\\n    /**\\n     * Using $tw to add fetched calender data to TiddlerWiki, and add tags to them\\n     */\\n    async importToWiki() {\\n      const tags = this.getAttribute('tags', '');\\n      const updateCategoriesOnly = this.getAttribute('categories', 'no') === 'yes';\\n      const buildCategoryTitle = categoryName => `谷歌日历/类型/${categoryName}`;\\n      const buildEventTitle = (categoryName, created) => `谷歌日历/事件/${categoryName}-${created}`;\\n\\t\\t\\tconst categoryTags = `${tags} 谷歌日历/类型`;\\n\\n      const calendarList = await this.getCalendarLists();\\n      const categories = calendarList.map(({ summary, description = '', backgroundColor, etag }) => ({\\n        title: buildCategoryTitle(summary),\\n        caption: summary,\\n        text: description,\\n        tags: categoryTags,\\n        color: backgroundColor,\\n        created: new Date(Number(JSON.parse(etag)) / 1000).toTWUTCString(),\\n      }));\\n      // update Categories only\\n      if (updateCategoriesOnly) {\\n        $tw.wiki.addTiddlers(categories);\\n        return;\\n      }\\n      // update events only\\n      \\n      const calendarEvents = await this.getCalendarEvents(calendarList);\\n      const tiddlers = calendarEvents.map(\\n        ({\\n          id,\\n          start: { dateTime: startDate },\\n          end: { dateTime: endDate },\\n          summary,\\n          description = '',\\n          created,\\n          updated = created,\\n          creator,\\n          htmlLink,\\n          organizer: { displayName: category },\\n          color,\\n        }) => ({\\n          title: buildEventTitle(summary, created),\\n          caption: summary,\\n          text: description,\\n          tags: `${tags} ${buildCategoryTitle(category)}`,\\n          type: 'text/vnd.tiddlywiki',\\n          startDate,\\n          endDate,\\n          created: new Date(created).toTWUTCString(),\\n          creator: creator.email || 'GoogleCalendar',\\n          modified: new Date(updated).toTWUTCString(),\\n          source: htmlLink,\\n          color, // mixed from calendar data\\n        })\\n      );\\n      $tw.wiki.addTiddlers(tiddlers);\\n    }\\n\\n    /**\\n     * Get calendars we want to import\\n     */\\n    async getCalendarLists() {\\n      const calendarListResponse = await gapi.client.calendar.calendarList.list({ showDeleted: false });\\n      const calendarList = calendarListResponse.result.items;\\n      // I set every calendar need to be imported have a description starts with '任务类型'\\n      return calendarList.filter((calendar) => String(calendar.description).startsWith('任务类型'));\\n    }\\n\\n    /**\\n     * Get list of Calendar events, modify this if you want to customize it for your need\\n     */\\n    async getCalendarEvents(calendarList) {\\n      // set date range\\n      let timeMin = new Date(new Date().setHours(0, 0, 0, 0)).toISOString();\\n      let timeMax = new Date(new Date().setHours(24, 0, 0, 0)).toISOString();\\n      const getYesterday = this.getAttribute('yesterday', 'no') === 'yes';\\n      if (getYesterday) {\\n        timeMin = new Date(new Date().setHours(-24, 0, 0, 0)).toISOString();\\n        timeMax = new Date(new Date().setHours(0, 0, 0, 0)).toISOString();\\n      }\\n\\n      const allEventList = await Promise.all(\\n        calendarList.map((calendar) => {\\n          const calendarColor = calendar.backgroundColor;\\n          // get all events in the calendar\\n          return gapi.client.calendar.events\\n            .list({\\n              calendarId: calendar.id,\\n              // from midnight to next midnight\\n              timeMin,\\n              timeMax,\\n            })\\n            .then((eventResponse) => {\\n              return eventResponse.result.items.map((item) => ({ ...item, color: calendarColor }));\\n            });\\n        })\\n      );\\n      return allEventList.flat();\\n    }\\n  }\\n\\n  exports['import-google-calendar-event'] = GoogleCalendarToTiddlyWikiWidget;\\n\\n  // Utils\\n  function pad(number) {\\n    if (number < 10) {\\n      return '0' + number;\\n    }\\n    return number;\\n  }\\n  Date.prototype.toTWUTCString = function toTWUTCString() {\\n    return (\\n      this.getUTCFullYear() +\\n      pad(this.getUTCMonth() + 1) +\\n      pad(this.getUTCDate()) +\\n      pad(this.getUTCHours()) +\\n      pad(this.getUTCMinutes()) +\\n      pad(this.getUTCSeconds()) +\\n      (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5)\\n    );\\n  };\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\",\"created\":\"20200429134418239\",\"modified\":\"20200505131811454\"},\"GoogleCalendarImportButton/LoadGAPI\":{\"title\":\"GoogleCalendarImportButton/LoadGAPI\",\"text\":\"\\n<script async defer src=\\\"https://apis.google.com/js/api.js\\\"></script>\",\"type\":\"text/html\",\"created\":\"20200429144941630\",\"modified\":\"20200429145513475\",\"tags\":\"$:/tags/RawMarkup GoogleCalendarImportButton\"},\"$:/plugins/linonetwo/google-calendar-import/readme\":{\"title\":\"$:/plugins/linonetwo/google-calendar-import/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!! Background\\n\\n[[google/zx|https://github.com/google/zx]] is a tool for writing better scripts, with Javascript.\\n\\nThis tiddlywiki plugin enables you to run any tiddler with zx.\\n\\n!! Usage\\n\\n!!! Tiddler Type\\n\\nTiddler with title extension `*.js *.md *.mjs` can be execute without problem. Other tiddler witout extension (no `.xxx`) will be executed as `*.md` file, for example, tid file without extions will be executed as `*.md`, but it works without problem too, even you are writing wiki text instead of markdown.\\n\\nIf you add filetype `application/javascript` to your tiddler, it will be recognized as `*.mjs`.\\n\\n!!! Button\\n\\n\\n!! Developer Documentation\\n\\nSee [[$:/plugins/linonetwo/google-calendar-import/developer]]\\n\"}}}"}